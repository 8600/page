<template>
  <div class="loading-box" id="loadingBox">
    <div class="loading">
      <img src="./images/loading.gif"/>
      <p id="loadingText">0%</p>
    </div>
  </div>
  <div class="main-box" id="main"></div>
  <div class="clock" id="clock">
    <div class="dial" id="clockDial">
      <div class="point" id="onePoint"></div>
      <div class="hand" id="oneHand"></div>
    </div>
  </div>
  <!-- 背景音乐 -->
  <audio src="./audio/bgm.mp3" id="bgm">
    您的浏览器不支持 audio 标签。
  </audio>
  <!-- 分享遮蔽罩子 -->
  <div class="share-box" id="shareBox">
    <img src="./images/share-text.png"/>
  </div>
</template>

<script>
  export default {
    data: {
      app: null,
      loader: null,
      container: null,
      titleStart: null,
      scroller: null,
      twoContainer: null,
      // 小人所走的进程
      progress: 3,
      // 小人
      people: null,
      // 小人图片
      peopleImgID: 1,
      imgArr: [
        './images/1-title.png',
        './images/1.png',
        './images/logo.png',
        './images/3-colour.png',
        "./images/1-clock.png",
        "./images/1-point.png",
        "./images/1-hand.png",
        "./images/1-butterfly.png",
        "./images/people-1.png",
        "./images/people-2.png",
        "./images/people-3.png",
        "./images/people-4.png",
        "./images/people-5.png",
        "./images/people-6.png",
        "./images/people-7.png",
        "./images/people-8.png",
        "./images/people-9.png",
        "./images/people-10.png",
        "./images/people-11.png",
        "./images/2.png",
        "./images/3.png",
        "./images/3-light.png",
        "./images/4.png",
        "./images/5.png",
        "./images/6.png",
        "./images/7.png",
        "./images/8.png",
        "./images/9.png",
        "./images/10.png",
        "./images/11.png",
        "./images/share.png",
        "./images/5-colour.png",
        "./images/7-light.png",
        './images/7-colour.png',
        './images/9-colour.png',
        "./images/11-light.png",
        './images/11-colour.png',
        "./images/3-cloud.png",
        "./images/4-cloud.png",
        "./images/5-cloud.png",
        "./images/6-cloud.png",
        "./images/7-cloud.png",
        "./images/8-cloud.png",
        "./images/9-cloud.png",
        "./images/10-cloud.png",
        './images/11-petal-colour.png'
      ],
      animationList: {}
    },
    created: function () {
      // 阻止页面滚动
      document.body.addEventListener('touchmove' , (e) =>{
        return
      })
      // 微信自动播放音频
      document.addEventListener('WeixinJSBridgeReady', () => {
        // 播放音乐
        $('#bgm')[0].play()
      })
      // 获取到进度条Dom
      const loadingTextDom =  $('#loadingText')[0]
      // 创建画板区域并获取设备屏幕宽高
      let bodySize = this.calculationScene(this)
      // 预加载资源
      this.data.loader = new PIXI.loaders.Loader()
      this.data.loader.add(this.data.imgArr)
        .onProgress.add((e) => {
          // 资源加载完毕后显示one
          loadingTextDom.innerText = parseInt(e.progress) + '%'
          if (Math.ceil(e.progress) >= 100) {
            // 蝴蝶飞舞动画
            this.data.animationList.oneButterfly = TweenMax.fromTo(oneButterfly, 0.8, {y: 0},{y: -1, ease:Linear.easeNone}).repeat(-1)
            this.data.animationList.oneButterfly.play()
            this.data.app.stage.addChild(one)

            // 隐藏掉加载页面
            $('#loadingBox').remove()

            // 显示时钟页面
            $('#clock')[0].style.display = 'block'
            
          }
        }
      )
      this.data.container = new PIXI.Container()
      this.data.container.interactive = true
      
      // 创建一个容器
      const one = new PIXI.Container()
      one.x = 0
      one.y = 0
      // 加载背景
      const bg1Image = this.methods.createSprite("./images/1.png", {
        width: bodySize.w,
        height: bodySize.h,
        x: 0,
        y: 0
      })
      // 加载首页logo
      const logoImageHeight = bodySize.h / 10
      const logoImageWidth = logoImageHeight * 3.6451
      const logoImage = this.methods.createSprite("./images/logo.png", {
        width: logoImageWidth,
        height: logoImageHeight,
        // 位置左下角
        x: (bodySize.w / 2) - (logoImageWidth / 2),
        y: bodySize.h - logoImageHeight - 10
      })

      // 加载顶部标题
      const oneTitleHeight = bodySize.h / 20
      // 保持图片比例
      const oneTitleWidth = oneTitleHeight * 9.818
      const oneTitle = this.methods.createSprite("./images/1-title.png", {
        width: oneTitleWidth,
        height: oneTitleHeight,
        // 位置中间靠上
        x: (bodySize.w / 2) - (oneTitleWidth / 2),
        y: bodySize.h * 0.1
      })

      // // 加载时钟
      const clockHeight = bodySize.h / 1.2
      // // 保持图片比例
      const clockWidth = clockHeight * 1.7801
      
      
      // 加载指针1-point 图片宽度235px
      const pointHeight = bodySize.h / 4


      // 加载蝴蝶 图片宽度:1347px 高度:730px 比例1.8452
      const butterflyHeight = bodySize.h / 1
      const butterflyWidth = bodySize.w
      const oneButterfly = this.methods.createSprite("./images/1-butterfly.png", {
        width: butterflyWidth,
        height: butterflyHeight,
        // 位置中间偏下10像素
        x: 0,
        y: 0,
        z: -1
      })

      one.addChild(bg1Image, logoImage, oneTitle, oneButterfly)
      

      // 触摸事件
      $("#clock").on("touchstart",(e) => {
        const touchInfo = this.calculationTouch(e)
        console.log(touchInfo)
        // 针对横向和纵向
        if (touchInfo.xRatio > 0.41 && touchInfo.xRatio < 0.46 && touchInfo.yRatio > 0.41 && touchInfo.yRatio < 0.48) {
          console.log('范围内了')
          // 触摸松开事件
          $("#clock").on("touchend",(e) => {
            // 取消触摸移动的监听
            $("#clock").off("touchmove")
          })
          $("#clock").on("touchmove",(e) => {
            // 计算出比例
            let proportion = this.calculationTouch(e)
            proportion = (proportion.xRatio - 0.438) / 0.06
            // 锁定在合适的区间内
            if (proportion > 0.6) proportion = 0.6
            if (proportion < 0) proportion = 0
            // 设置指针的幅度
            // console.log($('#onePoint'))
            $('#onePoint')[0].style.transform = `rotate(${50 * proportion}deg)`
            
            // 如果旋转到指定角度放大钟表
            if (proportion >= 0.6) {
              $('#clockDial')[0].classList.add(`flip-play`)
              $("#clock").off("touchmove")
              // 销毁蝴蝶
              // 停止蝴蝶动画
              this.data.animationList.oneButterfly.kill()
              // 销毁蝴蝶
              oneButterfly.destroy()
              setTimeout(() => {
                $('#clock')[0].classList.add('scale-play')
                // 销毁指针
                setTimeout(() => {
                  // 动画完毕销毁首页logo和背景
                  logoImage.destroy()
                  bg1Image.destroy()
                  
                  setTimeout(() => {
                    this.data.app.stage.removeChild(one)
                  }, 0)
                  // 销毁tocuh监听
                  $("#clock").off("touchstart")
                  $('#clock')[0].style.display = 'none'
                  console.log('首页已销毁')
                  // 开启第二部分
                  this.two()
                }, 1000)
              }, 1000)
            }
          })
        }
      })
      // 点击事件
      // 加载资源
      this.data.loader.load((loader) => {
        // 设置音乐播放模式
        
      })
      const shareDom = document.getElementById("shareBox")
      shareDom.ontouchend = function() {
        console.log(shareDom)
        shareDom.style.display = 'none'
        return false
      }
    },
    methods: {
      // 创建sprite对象
      createSprite: function(name, opt){
        const newSprite = new PIXI.Sprite.from(name)
        if (opt) {
          for (let key in opt) {
            newSprite[key] = opt[key]
          }
        }
        return newSprite
      },
      smooth: function (baseValue, minValue, nowValue, step) {
        // console.log(nowValue, baseValue + (nowValue - minValue) * step)
        return baseValue + (nowValue - minValue) * step
      }
    },
    // 注册画板区域并返回设备屏幕信息
    calculationScene: function() {
      // 获取屏幕宽高
      const ww = $(window).width()
      const wh = $(window).height()
      console.log(`可视宽度:${ww}, 可视高度:${wh}`)
      // 判断是否为微信
      if (false) {
        if (window.orientation !== 90 && window.orientation !== -90){
          window.document.body.classList.add('horizontal')
          window.document.body.style.width = `${wh}px`
          window.document.body.style.height = `${ww}px`
          window.document.body.style.left = `calc(50% - ${wh / 2}px)`
          window.document.body.style.top = `calc(50% - ${ww / 2}px)`
          // 创建画布
          this.data.app = new PIXI.Application($(window).height(), $(window).width(), {
            backgroundColor: '0xc8c9c9'
          })
          $('#main').append(this.data.app.view)
          this.data.app.stage.displayList = new PIXI.display.Stage()
          this.data.screenInfo = {w: wh, h: ww, transverse: false}
          return {w: wh, h: ww, transverse: false}
        }
      } else {
        if (ww < wh){
          window.document.body.classList.add('horizontal')
          window.document.body.style.width = `${wh}px`
          window.document.body.style.height = `${ww}px`
          window.document.body.style.left = `calc(50% - ${wh / 2}px)`
          window.document.body.style.top = `calc(50% - ${ww / 2}px)`
          // 创建画布
          this.data.app = new PIXI.Application($(window).height(), $(window).width(), {
            backgroundColor: '0xc8c9c9'
          })
          $('#main').append(this.data.app.view)
          this.data.app.stage.displayList = new PIXI.display.Stage()
          this.data.screenInfo = {w: wh, h: ww, transverse: false}
          return {w: wh, h: ww, transverse: false}
        }
      }
      // 创建画布
      this.data.app = new PIXI.Application($(window).width(), $(window).height(), {
        backgroundColor: '0xc8c9c9'
      })
      $('#main').append(this.data.app.view)
      this.data.app.stage.displayList = new PIXI.display.Stage()
      this.data.transverse = true
      this.data.screenInfo = {w: ww, h: wh, transverse: true}
      return {w: ww, h: wh, transverse: true}
    },
    // 计算出鼠标点击位置
    calculationTouch: function (e) {
      if (this.data.screenInfo.transverse) {
        // console.log(e.originalEvent.targetTouches[0].pageX, e.originalEvent.targetTouches[0].pageY)
        return {
          x: e.originalEvent.targetTouches[0].pageX,
          y: e.originalEvent.targetTouches[0].pageY,
          xRatio: e.originalEvent.targetTouches[0].pageX / this.data.screenInfo.w,
          yRatio: e.originalEvent.targetTouches[0].pageY / this.data.screenInfo.h
        }
      } else {
        return {
          x: e.originalEvent.targetTouches[0].pageY,
          y: this.data.screenInfo.h - e.originalEvent.targetTouches[0].pageX,
          xRatio: e.originalEvent.targetTouches[0].pageY / this.data.screenInfo.w,
          yRatio: (this.data.screenInfo.h - e.originalEvent.targetTouches[0].pageX) / this.data.screenInfo.h
        }
      }
      
    },
    two: function () {
      const bodySize = this.data.screenInfo
      console.log('第二部分!')
      
      this.data.twoContainer = new PIXI.Container()
      this.data.twoContainer.x = 0
      this.data.twoContainer.y = 0
      this.data.twoContainer.width = this.data.screenInfo.w
      // 加载小人
      this.data.people = this.methods.createSprite("./images/people-1.png",{
        width: 50 * (this.data.screenInfo.w / 1024),
        height: 120 * (this.data.screenInfo.h / 768),
        x: 50,
        y: 0
      })
      // 第二张背景图
      const bg2Image = this.methods.createSprite("./images/2.png",{
        width: this.data.screenInfo.w + 1,
        height: this.data.screenInfo.h,
        x: -1,
        y: 0
      })
      
      // 第三张背景图
      const bg3Image = this.methods.createSprite("./images/3.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w,
        y: 1
      })
      
      // 第四章背景图
      const bg4Image = this.methods.createSprite("./images/4.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 2,
        y: -1
      })

      // 第五张背景图
      const bg5Image = this.methods.createSprite("./images/5.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 3,
        y: 0
      })

      // 第五张背景图
      const bg6Image = this.methods.createSprite("./images/6.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 4,
        y: 0
      })

      const bg7Image = this.methods.createSprite("./images/7.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 5,
        y: 1
      })
      const bg8Image = this.methods.createSprite("./images/8.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 6,
        y: -4
      })
      const bg9Image = this.methods.createSprite("./images/9.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 7,
        y: 0
      })
      const bg10Image = this.methods.createSprite("./images/10.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 8,
        y: 0
      })

      const bg11Image = this.methods.createSprite("./images/11.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 9,
        y: 0
      })

      const bgshare = this.methods.createSprite("./images/share.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 10,
        y: 0
      })

      // 呼唤朋友按钮 3.9275
      const shareBTH = this.data.screenInfo.h * 0.08
      const shareBT = this.methods.createSprite("./images/share-button.png",{
        width: shareBTH * 3.9275,
        height: shareBTH,
        x: this.data.screenInfo.w * 10 + this.data.screenInfo.w * 0.2,
        y: this.data.screenInfo.h * 0.7
      })
      // 设置可交互
      shareBT.interactive = true;
      shareBT.buttonMode = true
      shareBT.on('tap', (e) => {
        console.log(e)
        $('#shareBox')[0].style.display = 'block'
        e.stopped = true
        return false
      })
      
      // 期待2019按钮 3.9275
      const BTH2019 = this.data.screenInfo.h * 0.08
      const BT2019 = this.methods.createSprite("./images/2019.png",{
        width: BTH2019 * 3.9275,
        height: BTH2019,
        x: this.data.screenInfo.w * 10 + this.data.screenInfo.w * 0.58,
        y: this.data.screenInfo.h * 0.7
      })
      // 设置可交互
      BT2019.interactive = true;
      BT2019.buttonMode = true
      BT2019.on('tap', () => {
        window.open('http://www.people.com.cn/32306/422743/index.html')
      })

      // ------------------------------------------- 云 -------------------------------------------
      // 3云 比例6.397
      const cloud3H = bodySize.h * 0.25
      const cloud3 = this.methods.createSprite("./images/3-cloud.png", {
        width: cloud3H * 6.397,
        height: cloud3H,
        // 位置中间靠上
        x: bodySize.w + (bodySize.w * 0.05),
        y: bodySize.h * 0.1
      })
      const cloud3AnimationList = new TweenMax(cloud3, 2, {
        x: bodySize.w + (bodySize.w * 0.05) + 10,
        repeat:-1,
        yoyo:true,
      })
      cloud3AnimationList.play()

      // 4云 比例2.1159
      const cloud4H = bodySize.h * 0.8
      const cloud4 = this.methods.createSprite("./images/4-cloud.png", {
        width: cloud4H * 2.1159,
        height: cloud4H,
        // 位置中间靠上
        x: bodySize.w * 2,
        y: 0
      })
      const cloud4AnimationList = new TweenMax(cloud4, 2, {
        x: bodySize.w * 2 + 15,
        repeat:-1,
        yoyo:true,
      })
      cloud4AnimationList.play()

      // cloud5 比例4.7467
      const cloud5H = bodySize.h * 0.3
      const cloud5 = this.methods.createSprite("./images/5-cloud.png", {
        width: cloud5H * 4.7467,
        height: cloud5H,
        x: bodySize.w * 3 + (bodySize.w * 0.05),
        y: bodySize.h * 0.1
      })
      const cloud5AnimationList = new TweenMax(cloud5, 2, {
        x: bodySize.w * 3 + (bodySize.w * 0.05) + 10,
        repeat:-1,
        yoyo:true,
      })
      cloud5AnimationList.play()

      // 6云 比例2.0727
      const cloud6H = bodySize.h * 0.7
      const cloud6 = this.methods.createSprite("./images/6-cloud.png", {
        width: cloud6H * 2.0727,
        height: cloud6H,
        // 位置中间靠上
        x: bodySize.w * 4 + (bodySize.w * 0.05),
        y: 0
      })
      const cloud6AnimationList = new TweenMax(cloud6, 2, {
        x: bodySize.w * 4 + 15,
        repeat:-1,
        yoyo:true,
      })
      cloud6AnimationList.play()

      // cloud7 比例5.0339
      const cloud7H = bodySize.h * 0.3
      const cloud7 = this.methods.createSprite("./images/7-cloud.png", {
        width: cloud7H * 5.0339,
        height: cloud7H,
        x: bodySize.w * 5 + (bodySize.w * 0.05),
        y: 0
      })
      const cloud7AnimationList = new TweenMax(cloud7, 2, {
        x: bodySize.w * 5 + (bodySize.w * 0.05) + 10,
        repeat:-1,
        yoyo:true,
      })
      cloud7AnimationList.play()

      // cloud8 比例2.5685
      const cloud8H = bodySize.h * 0.6
      const cloud8 = this.methods.createSprite("./images/8-cloud.png", {
        width: cloud8H * 2.5685,
        height: cloud8H,
        // 位置中间靠上
        x: bodySize.w * 6 + (bodySize.w * 0.05),
        y: bodySize.h * 0.05
      })
      const cloud8AnimationList = new TweenMax(cloud8, 2, {
        x: bodySize.w * 6  + (bodySize.w * 0.05) + 10,
        repeat:-1,
        yoyo:true,
      })
      cloud8AnimationList.play()

      // cloud9 比例3.8078
      const cloud9H = bodySize.h * 0.45
      const cloud9 = this.methods.createSprite("./images/9-cloud.png", {
        width: cloud9H * 3.8078,
        height: cloud9H,
        // 位置中间靠上
        x: bodySize.w * 7 + (bodySize.w * 0.05),
        y: bodySize.h * 0.15
      })
      const cloud9AnimationList = new TweenMax(cloud9, 2, {
        x: bodySize.w * 7  + (bodySize.w * 0.05) + 10,
        repeat:-1,
        yoyo:true,
      })
      cloud9AnimationList.play()

      // cloud10 比例2.1029
      const cloud10H = bodySize.h * 0.6
      const cloud10 = this.methods.createSprite("./images/10-cloud.png", {
        width: cloud10H * 2.1029,
        height: cloud10H,
        // 位置中间靠上
        x: bodySize.w * 8 + (bodySize.w * 0.2),
        y: bodySize.h * 0.15
      })
      const cloud10AnimationList = new TweenMax(cloud10, 2, {
        x: bodySize.w * 8  + (bodySize.w * 0.2) + 10,
        repeat:-1,
        yoyo:true,
      })
      cloud10AnimationList.play()

      // 飘散的花瓣 比例1.7130
      const petal11H = bodySize.h * 0.8
      const petal11 = this.methods.createSprite("./images/11-petal.png", {
        width: petal11H * 1.7130,
        height: petal11H,
        // 位置中间靠上
        x: bodySize.w * 9 + (bodySize.w * 0.2),
        y: bodySize.h * 0.15
      })
      const petal11AnimationList = TweenMax.fromTo(petal11, 8, {
          x: bodySize.w * 9  + (bodySize.w * 0.2) - 20,
          y: bodySize.h * 0.15 - 20,
        },{
          x: bodySize.w * 9  + (bodySize.w * 0.2) + 20,
          y: bodySize.h * 0.15 + 40,
        }).repeat(-1)
      petal11AnimationList.play()

      // 分享页花瓣 比例1.8293
      const petal12H = bodySize.h * 0.8
      const petal12 = this.methods.createSprite("./images/share-petal-colour.png", {
        width: petal12H * 1.8293,
        height: petal12H,
        // 位置中间靠上
        x: bodySize.w * 10 + (bodySize.w * 0.1),
        y: bodySize.h * 0.15
      })
      const petal12AnimationList = TweenMax.fromTo(petal12, 8, {
          x: bodySize.w * 10  + (bodySize.w * 0.1) - 20,
          y: bodySize.h * 0.15 - 20,
        },{
          x: bodySize.w * 10  + (bodySize.w * 0.1) + 20,
          y: bodySize.h * 0.15 + 40,
        }).repeat(-1)
      petal12AnimationList.play()

      // ------------------------------------------- 亮光 -------------------------------------------
      // 第三张光 比例1
      const threeLightHeight = bodySize.h / 3
      const threeLight = this.methods.createSprite("./images/3-light.png", {
        width: threeLightHeight,
        height: threeLightHeight,
        // 位置中间靠上
        x: bodySize.w + (bodySize.w * 0.62) - (threeLightHeight / 2),
        y: bodySize.h * 0.1
      })
      
      // 设置可交互
      threeLight.interactive = true;
      threeLight.buttonMode = true
      // 第三张图 亮光触摸事件
      threeLight.on('tap', () => {
        // 修改背景颜色
        // this.data.app.renderer.backgroundColor = "0x2a99a5"
        gradientColor(this.data.app.renderer,'#c8c9c9','#2a99a5',10)
        console.log(this.data.app.renderer)
        this.data.progress = 3
        const texture = PIXI.Texture.fromFrame('./images/3-colour.png')
        bg3Image.setTexture(texture)
        // 销毁动画
        threeLightAnimationList.kill()
        // 小手动画
        threeHandAnimation.kill()
        // 销毁掉亮光
        threeLight.destroy()
        // 销毁掉小手
        threeHand.destroy()
        // 销毁掉云
        cloud3.destroy()
        cloud3AnimationList.kill()
        // 设置可滚动的区域
        this.setShowPageNumber(4)
      })

      // 第三张图小手
      const threeHandHeight = bodySize.h / 10
      const threeHand = this.methods.createSprite("./images/1-hand.png", {
        width: threeHandHeight,
        height: threeHandHeight,
        // 位置中间靠上
        x: bodySize.w + (bodySize.w * 0.67) - (threeHandHeight / 2),
        y: bodySize.h * 0.28
      })
      // 三-小手闪烁
      const threeHandAnimation = TweenMax.fromTo(threeHand, 1, {alpha: 0},{alpha: 1}).repeat(-1)
      threeHandAnimation.play()

      // 第五张光 比例2.0581
      const fiveLightHeight = bodySize.h / 10
      const fiveLight = this.methods.createSprite("./images/5-light.png", {
        width: fiveLightHeight * 2.0581,
        height: fiveLightHeight,
        // 位置中间靠上
        x: bodySize.w * 3 + (bodySize.w * 0.575) - (fiveLightHeight / 2),
        y: bodySize.h * 0.58
      })
      // 设置可交互
      fiveLight.interactive = true;
      fiveLight.buttonMode = true
      // 第五张光 亮光触摸事件
      fiveLight.on('tap', () => {
        const texture = PIXI.Texture.fromFrame('./images/5-colour.png')
        // 修改背景颜色
        gradientColor(this.data.app.renderer,'#c8c9c9','#59d3cb',10)
        // this.data.app.renderer.backgroundColor = "0x59d3cb"
        this.data.progress = 5
        bg5Image.setTexture(texture)
        // 销毁动画
        fiveLightHeightAnimationList.kill()
        // 销毁掉亮光
        fiveLight.destroy()
        // 销毁云
        cloud5.destroy()
        cloud5AnimationList.kill()
        // 设置可滚动的区域
        this.setShowPageNumber(6)
      })

      // 第七张图 比例:0.7421
      const sevenLightHeight = bodySize.h / 5
      const sevenLight = this.methods.createSprite("./images/7-light.png", {
        width: sevenLightHeight * 0.7421,
        height: sevenLightHeight,
        // 位置中间靠上
        x: bodySize.w * 5 + (bodySize.w * 0.33) - (sevenLightHeight / 2),
        y: bodySize.h * 0.57
      })
      // 设置可交互
      sevenLight.interactive = true;
      sevenLight.buttonMode = true
      // 第五张光 亮光触摸事件
      sevenLight.on('tap', () => {
        // 修改背景颜色
        gradientColor(this.data.app.renderer,'#c8c9c9','#dccfbc',10)
        // this.data.app.renderer.backgroundColor = "0xdccfbc"
        this.data.progress = 7
        const texture = PIXI.Texture.fromFrame('./images/7-colour.png')
        bg7Image.setTexture(texture)
        // 销毁动画
        sevenLightHeightAnimationList.kill()
        // 销毁掉亮光
        sevenLight.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(8)
      })

      // 第九张图 比例:1
      const Light9Height = bodySize.h / 5
      const Light9 = this.methods.createSprite("./images/9-light.png", {
        width: Light9Height,
        height: Light9Height,
        // 位置中间靠上
        x: bodySize.w * 7 + (bodySize.w * 0.57) - (sevenLightHeight / 2),
        y: bodySize.h * 0.065
      })

      // 设置可交互
      Light9.interactive = true;
      Light9.buttonMode = true
      // 第五张光 亮光触摸事件
      Light9.on('tap', () => {
        // 修改背景颜色
        gradientColor(this.data.app.renderer,'#c8c9c9','#fae768',10)
        // this.data.app.renderer.backgroundColor = "0xfae768"
        this.data.progress = 9
        const texture = PIXI.Texture.fromFrame('./images/9-colour.png')
        bg9Image.setTexture(texture)
        // 销毁动画
        Light9AnimationList.kill()
        // 销毁掉亮光
        Light9.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(10)
      })

      // 第11张图 大柚子 比例:1
      const Light11Height = bodySize.h / 1.3
      console.log((bodySize.h / bodySize.w))
      const Light11 = this.methods.createSprite("./images/11-light.png", {
        width: bodySize.w * 0.42,
        height: Light11Height,
        // 位置中间靠上
        x: bodySize.w * 9 + (bodySize.w * 0.362) - (sevenLightHeight / 2),
        y: bodySize.h * 0.065
      })
      // 设置可交互
      Light11.interactive = true;
      Light11.buttonMode = true
      // 第五张光 亮光触摸事件
      Light11.on('tap', () => {
        // 修改背景颜色
        this.data.app.renderer.backgroundColor = "0xcfdee5"
        this.data.progress = 11
        const texture = PIXI.Texture.fromFrame('./images/11-colour.png')
        bg11Image.setTexture(texture)
        // 替换彩色花瓣材质
        const petalTexture = PIXI.Texture.fromFrame('./images/11-petal-colour.png')
        petal11.setTexture(petalTexture)
        // 销毁动画
        Light11AnimationList.kill()
        // 销毁掉亮光
        Light11.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(11)
      })
      // 添加背景
      this.data.twoContainer.addChild(bg2Image, bg3Image, this.data.people, threeLight, threeHand, bg4Image, bg5Image, bg6Image, bg7Image, bg8Image, bg9Image, bg10Image, Light11, bg11Image, bgshare, fiveLight, sevenLight, Light9, shareBT, BT2019)
      // 添加云
      this.data.twoContainer.addChild(cloud3, cloud4, cloud5, cloud6, cloud7, cloud8, cloud9, cloud10, petal11, petal12)
      this.data.app.stage.addChild(this.data.twoContainer)
      
      // 三-亮光闪烁
      const threeLightAnimationList = TweenMax.fromTo(threeLight, 1, {alpha: 0},{alpha: 1}).repeat(-1)
      threeLightAnimationList.play()

      // 五-亮光闪烁
      const fiveLightHeightAnimationList = TweenMax.fromTo(fiveLight, 1, {alpha: 0},{alpha: 1}).repeat(-1)
      fiveLightHeightAnimationList.play()

      // 七-亮光闪烁
      const sevenLightHeightAnimationList = TweenMax.fromTo(sevenLight, 1, {alpha: 0},{alpha: 1}).repeat(-1)
      sevenLightHeightAnimationList.play()

      // 九-亮光闪烁
      const Light9AnimationList = TweenMax.fromTo(Light9, 1, {alpha: 0},{alpha: 1}).repeat(-1)
      Light9AnimationList.play()

      // 十一-亮光闪烁
      const Light11AnimationList = TweenMax.fromTo(Light11, 2, {alpha: 0},{alpha: 1}).repeat(-1)
      Light11AnimationList.play()

      this.scrollBegin()
    },
    scrollBegin: function () {
      console.log('注册scroll!')
      const transverse = this.data.screenInfo.transverse
      
      this.data.scroller = new Scroller((left, top, zoom) => {

        const scrollNumber = transverse ? left: top
        // 设置整个页面的x
        this.data.twoContainer.x = -scrollNumber
        const peopleX = scrollNumber + 50 * (1024 / this.data.screenInfo.w)
        // 移动小人
        this.data.people.x = peopleX
        // 设置小人的图片
        this.setPeopleImg(peopleX)
        // 设置背景颜色
        this.setBGC(peopleX)
        // console.log(scrollNumber)
        // 小球移动轨迹
        this.setPeopleY(peopleX)
      }, {
        zooming: true,
        bouncing: false
      })
      // 设置可滚动的区域
      this.setShowPageNumber(2)
      // 监听鼠标事件
      this.mouseEvent()
      
    },
    // 设置可以拖动的屏幕数量
    setShowPageNumber: function (number) {
      const transverse = this.data.screenInfo.transverse
      // 根据横屏还是竖屏 设置滚动区域
      if (transverse) {
        // 横屏
        this.data.scroller.setDimensions(this.data.screenInfo.w, this.data.screenInfo.h, this.data.screenInfo.w * number, this.data.screenInfo.h)
      } else {
        
        // this.data.twoContainer.rotation = 0.1
        // this.data.twoContainer.updateTransform()
        // console.log(this.data.twoContainer)
        // const transformTool = new TransformTool({canvas: canvasElement})
        // this.data.app.stage.addChild(transformTool)
        this.data.scroller.setDimensions(this.data.screenInfo.h, this.data.screenInfo.w, this.data.screenInfo.h, this.data.screenInfo.w * number)
      }
    },
    // 计算并设置小人Y坐标
    setPeopleY: function (peopleX) {
      // 当时是在屏幕分辨率为1024*768做的 所以要计算换算为真实屏幕
      peopleX = peopleX * (1024 / this.data.screenInfo.w)
      if (peopleX < 188) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.25, 0, peopleX, 0.001)
      } else if (peopleX < 390) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.438, 188, peopleX, 0.0007)
      } else if (peopleX < 560) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5794, 390, peopleX, 0.00025)
      } else if (peopleX < 687) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6219, 560, peopleX, -0.0003)
      } else if (peopleX < 966) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5838, 687, peopleX, -0.0011)
      } else if (peopleX < 1125) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2769, 966, peopleX, -0.0004)
      } else if (peopleX < 1167) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2133, 1125, peopleX, -0.00005)
      } else if (peopleX < 1412) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2112, 1167, peopleX, 0.0005)
      } else if (peopleX < 1591) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3337, 1412, peopleX, 0.001)
      } else if (peopleX < 1744) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5136, 1591, peopleX, 0.0006)
      } else if (peopleX < 1844) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6054, 1744, peopleX, 0.0001)
      } else if (peopleX < 2017) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6122, 1844, peopleX, -0.0006)
      } else if (peopleX < 2238) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5081, 2017, peopleX, -0.001)
      } else if (peopleX < 2386) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2864, 2238, peopleX, -0.0006)
      } else if (peopleX < 2530) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.1980, 2386, peopleX, -0.0002)
      } else if (peopleX < 2679) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.1690, 2530, peopleX, 0.00015)
      } else if (peopleX < 3299) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.1911, 2679, peopleX, 0.0006)
      } else if (peopleX < 3777) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5635, 3299, peopleX, -0.0005)
      } else if (peopleX < 3969) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3243, 3777, peopleX, -0.0001)
      } else if (peopleX < 4317) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3050, 3969, peopleX, 0.0003)
      } else if (peopleX < 4614) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.4096, 4317, peopleX, 0.0005)
      } else if (peopleX < 4944) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5582, 4614, peopleX, 0.0003)
      } else if (peopleX < 5352) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6572, 4944, peopleX, -0.0007)
      } else if (peopleX < 5638) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3714, 5352, peopleX, -0.0003)
      } else if (peopleX < 5946) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2854, 5638, peopleX, 0.0004)
      } else if (peopleX < 6443) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.4089, 5946, peopleX, 0.0006)
      } else if (peopleX < 7042) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.7080, 6443, peopleX, 0.00001)
      } else if (peopleX < 7723) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.7139, 7042, peopleX, -0.0004)
      } else if (peopleX < 8383) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.4412, 7723, peopleX, 0.0001)
      } else if (peopleX < 9303) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5072, 8383, peopleX, -0.00026)
      } else if (peopleX < 10025) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2677, 9303, peopleX, 0.0003)
      } else {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.4844, 10025, peopleX, -0.0004)
      }
    },
    setPeopleImg: function (peopleX) {
      const peopleID = Math.ceil(peopleX / this.data.screenInfo.w)
      if (this.data.peopleImgID !== peopleID) {
        const texture = PIXI.Texture.fromFrame('./images/people-' + peopleID +'.png')
        this.data.people.setTexture(texture)
        this.data.peopleImgID = peopleID
      }
    },
    setBGC: function (peopleX) {
      const progressID = Math.ceil(peopleX / this.data.screenInfo.w)
      if (this.data.progress < progressID) {
        this.data.progress = progressID
        
        // gradientColor(this.data.app.renderer,'#fae768','#c8c9c9',10)
        this.data.app.renderer.backgroundColor = '0xc8c9c9'
      }
    },
    // 移动屏幕鼠标事件
    mouseEvent: function () {
      let mousedown = false
      // 待优化 监听canvas就行
      $('canvas')[0].addEventListener("touchstart", (e) => {
        this.data.scroller.doTouchStart(e.touches, e.timeStamp)
        mousedown = true
      }, false)

      $('canvas')[0].addEventListener("touchmove", (e) => {
        if (!mousedown) {
          return
        }
        // console.log(e.touches, e.timeStamp)
        this.data.scroller.doTouchMove(e.touches, e.timeStamp);
        mousedown = true
      }, false);

      $('canvas')[0].addEventListener("touchend", (e) => {
        if (!mousedown) {
          return
        }
        this.data.scroller.doTouchEnd(e.timeStamp)
        mousedown = false
      }, false)
    }
  }
</script>

<style lang="less">
  .loading-box {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: #01021a;
    .loading {
      width: 200px;
      height: 168px;
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      margin: auto;
    }
    img {
      display: block;
    }
    p {
      color: white;
      text-align: center;
      line-height: 30px;
    }
  }
  .clock {
    width: 80%;
    height: 80%;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    left: 8%;
    top: 10%;
    position: fixed;
    display: none;
    background-image: url(./images/1-clock.png);
  }
  .dial {
    width: 30%;
    height: 54%;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    position: absolute;
    left: 35%;
    top: 24%;
    transform-origin: 0 50%;
    background-image: url(./images/1-clock-dial.png);
  }
  .flip-play {
    animation-name: flip;
    animation-duration: 1s;
    animation-fill-mode: forwards;
    animation-timing-function: ease-in-out;
    animation-iteration-count: 1;
  }
  .scale-play {
    animation-name: scale;
    animation-duration: 1s;
    animation-fill-mode: forwards;
    animation-timing-function: ease-in-out;
    animation-iteration-count: 1;
  }
  @keyframes flip {
    0% {
      transform: rotateY(0deg);
    }
    100% {
      transform: rotateY(120deg);
    }
  }
  @keyframes scale {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(8);
    }
  }
  .point {
    width: 45%;
    height: 51%;
    left: 27%;
    top: 24%;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    position: absolute;
    background-image: url(./images/1-point.png);
    transform-origin: 50% 50%;
  }
  @keyframes around {
    0% {
      transform: translateX(0);
    }
    100%{
      transform: translateX(20px);
    }
  }
  .hand {
    width: 10%;
    height: 10%;
    left: 34%;
    top: 25%;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    position: absolute;
    background-image: url(./images/1-hand.png);
    animation-name: around;
    animation-duration: 2s;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
  }
  .share-box {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    display: none;
    background-color: rgba(0, 0, 0, 0.50);
    img {
      position: absolute;
      left: 0;
      top: 10px;
    }
  }
</style>