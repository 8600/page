<template>
  <div class="loading-box" id="loadingBox">
    <div class="loading">
      <img src="./images/loading.svg"/>
      <div class="progress" id="progress"></div>
    </div>
  </div>
  <div class="main-box" id="main"></div>
  <div class="clock" id="clock">
    <div class="dial" id="clockDial">
      <div class="point" id="onePoint"></div>
      <div class="hand" id="oneHand"></div>
    </div>
  </div>
  <!-- 背景音乐 -->
  <audio src="./audio/bgm.mp3" id="bgm" loop>
    您的浏览器不支持 audio 标签。
  </audio>
  <!-- 分享遮蔽罩子 -->
  <div class="share-box" id="shareBox">
    <img src="./images/share-text.png"/>
  </div>
  <div class="text-box" @name="showTextBox">
    <div class="text-box-content" @name="textBoxContent">提示内容</div>
  </div>
  <div class="music-box">
    <img class="music-play" id="musicPlay" @click="closeMusic" src="./images/music-play.png"/>
    <img class="music-close" id="musicClose" @click="palyMusic" src="./images/music-close.png"/>
  </div>
  <div id="qr" class="qr-box">
    <img class="qr" src="./images/QR.png"/>
    <div class="qr-text">扫码共享未来</div>
  </div>
</template>

<script>
  module.exports = {
    data: {
      app: null,
      loader: null,
      container: null,
      titleStart: null,
      scroller: null,
      twoContainer: null,
      // 小人所走的进程
      progress: 1,
      // 小人
      people: null,
      // 小人图片
      peopleImgID: 1,
      // 最大到达的X点
      xMax: 0,
      resources: null,
      peopleCanMoveing: false,
      clickPeopleRunning: false,
      imgArr: [
        './images/1.png',
        './images/3-colour.png',
        "./images/1-clock.png",
        "./images/1-point.png",
        "./images/hand.png",
        "./images/1-hand.png",
        "./images/1-butterfly.png",
        "./images/2.png",
        "./images/3.png",
        "./images/3-thought.png",
        "./images/3-start.png",
        "./images/3-light.png",
        "./images/5.png",
        "./images/7.png",
        "./images/9.png",
        "./images/11.png",
        "./images/share.png",
        "./images/5-colour.png",
        "./images/7-light.png",
        './images/7-colour.png',
        './images/9-colour.png',
        "./images/11-light.png",
        './images/11-colour.png',
        "./images/3-cloud.png",
        "./images/4-cloud.png",
        "./images/5-cloud.png",
        "./images/6-cloud.png",
        "./images/7-cloud.png",
        "./images/8-cloud.png",
        "./images/9-cloud.png",
        "./images/10-cloud.png",
        './images/11-petal-colour.png',
        './images/1/1.png',
        './images/1/2.png',
        './images/1/3.png',
        './images/1/4.png',
        './images/1/5.png',
        './images/1/6.png',
        './images/1/7.png',
        './images/1/8.png',
        './images/1/9.png',
        './images/1/10.png',
        './images/1/11.png',
        './images/1/12.png',
        './images/1/13.png',
        './images/1/14.png',
        './images/1/15.png',
        './images/1/16.png',
        './images/2/1.png',
        './images/2/2.png',
        './images/2/3.png',
        './images/2/4.png',
        './images/2/5.png',
        './images/2/6.png',
        './images/2/7.png',
        './images/2/8.png',
        './images/2/9.png',
        './images/2/10.png',
        './images/2/11.png',
        './images/2/12.png',
        './images/2/13.png',
        './images/2/14.png',
        './images/2/15.png',
        './images/2/16.png',
        './images/3/1.png',
        './images/3/2.png',
        './images/3/3.png',
        './images/3/4.png',
        './images/3/5.png',
        './images/3/6.png',
        './images/3/7.png',
        './images/3/8.png',
        './images/3/9.png',
        './images/3/10.png',
        './images/3/11.png',
        './images/3/12.png',
        './images/3/13.png',
        './images/3/14.png',
        './images/3/15.png',
        './images/3/16.png',
        './images/4/1.png',
        './images/4/2.png',
        './images/4/3.png',
        './images/4/4.png',
        './images/4/5.png',
        './images/4/6.png',
        './images/4/7.png',
        './images/4/8.png',
        './images/4/9.png',
        './images/4/10.png',
        './images/4/11.png',
        './images/4/12.png',
        './images/4/13.png',
        './images/4/14.png',
        './images/4/15.png',
        './images/4/16.png',
        './images/5/1.png',
        './images/5/2.png',
        './images/5/3.png',
        './images/5/4.png',
        './images/5/5.png',
        './images/5/6.png',
        './images/5/7.png',
        './images/5/8.png',
        './images/5/9.png',
        './images/5/10.png',
        './images/5/11.png',
        './images/5/12.png',
        './images/5/13.png',
        './images/5/14.png',
        './images/5/15.png',
        './images/5/16.png',
        './images/6/1.png',
        './images/6/2.png',
        './images/6/3.png',
        './images/6/4.png',
        './images/6/5.png',
        './images/6/6.png',
        './images/6/7.png',
        './images/6/8.png',
        './images/6/9.png',
        './images/6/10.png',
        './images/6/11.png',
        './images/6/12.png',
        './images/6/13.png',
        './images/6/14.png',
        './images/6/15.png',
        './images/6/16.png',
        './images/7/1.png',
        './images/7/2.png',
        './images/7/3.png',
        './images/7/4.png',
        './images/7/5.png',
        './images/7/6.png',
        './images/7/7.png',
        './images/7/8.png',
        './images/7/9.png',
        './images/7/10.png',
        './images/7/11.png',
        './images/7/12.png',
        './images/7/13.png',
        './images/7/14.png',
        './images/7/15.png',
        './images/7/16.png',
        './images/8/1.png',
        './images/8/2.png',
        './images/8/3.png',
        './images/8/4.png',
        './images/8/5.png',
        './images/8/6.png',
        './images/8/7.png',
        './images/8/8.png',
        './images/8/9.png',
        './images/8/10.png',
        './images/8/11.png',
        './images/8/12.png',
        './images/8/13.png',
        './images/8/14.png',
        './images/8/15.png',
        './images/8/16.png',
        './images/9/1.png',
        './images/9/2.png',
        './images/9/3.png',
        './images/9/4.png',
        './images/9/5.png',
        './images/9/6.png',
        './images/9/7.png',
        './images/9/8.png',
        './images/9/9.png',
        './images/9/10.png',
        './images/9/11.png',
        './images/9/12.png',
        './images/9/13.png',
        './images/9/14.png',
        './images/9/15.png',
        './images/9/16.png',
        "./images/grass1.png",
        "./images/showMore.png",
        "./images/showMore2.png",
        "./images/child.png",
        "./images/grass2.png",
        "./images/grass3.png",
        "./images/3-bubble.png",
        "./images/3-atom.png",
        "./images/3-flask.png",
        "./images/3-star.png",
        "./images/tree1.png",
        "./images/tree2.png",
        "./images/tree3.png",
        "./images/house1.png",
        "./images/house2.png",
        "./images/house3.png",
        "./images/house4.png",
        "./images/house5.png",
        "./images/line-1.png",
        "./images/line-2.png",
        "./images/line-3.png",
        "./images/line-4.png",
        "./images/share-button.png",
        "./images/again.png",
        "./images/11-petal.png",
        "./images/share-petal-colour.png",
        "./images/light-hand.png",
        "./images/5-light.png",
        "./images/9-light.png",
        "./images/3-fantasy.png",
        "./images/9-bird.png"
      ],
      mousedown: false,
      animationList: {},
      layer: null
    },
    created: function () {
      // 获取到进度条Dom
      const ww = $(window).width()
      const wh = $(window).height()
      // alert(`可视宽度:${ww}, 可视高度:${wh}`)
      // 创建画板区域并获取设备屏幕宽高
      let bodySize = this.calculationScene(this)
      // 预加载资源
      this.data.loader = PIXI.loader
      
      // 手托着地球
      this.data.loader.add("./images/earth.gif", {
        loadType: PIXI.loaders.Resource.LOAD_TYPE.XHR,
        xhrType: PIXI.loaders.Resource.XHR_RESPONSE_TYPE.BUFFER,
        crossOrigin:''
      })
      this.data.loader.add(this.data.imgArr)
        .onProgress.add((e) => {
          // 资源加载完毕后显示one
          const progressDom = $('#progress')[0]
          if (progressDom) {
            progressDom.innerText = parseInt(e.progress) + '%'
          }
        }
      )
      this.data.container = new PIXI.Container()
      this.data.container.interactive = true
      
      // 创建一个容器
      const one = new PIXI.Container()
      one.x = 0
      one.y = 0
      // 加载背景
      const bg1Image = this.methods.createSprite("./images/1.png", {
        width: bodySize.w,
        height: bodySize.h,
        x: 0,
        y: 0
      })

      // 加载时钟
      const clockHeight = bodySize.h / 1.2
      // 保持图片比例
      const clockWidth = clockHeight * 1.7801
      
      
      // 加载指针1-point 图片宽度235px
      const pointHeight = bodySize.h / 4


      // 加载蝴蝶 图片宽度:1347px 高度:730px 比例1.8452
      const butterflyHeight = bodySize.h / 1.3
      const butterflyWidth = bodySize.w
      const oneButterfly = this.methods.createSprite("./images/1-butterfly.png", {
        width: butterflyWidth,
        height: butterflyHeight,
        // 位置中间偏下10像素
        x: 0,
        y: bodySize.h * 0.1,
        z: -1
      })

      one.addChild(bg1Image, oneButterfly)
      
      this.addBind($("#clockDial"), () => {
        // 播放音乐
        $('#bgm')[0].play()
        $('#musicPlay').show()
        this.openClock(one, oneButterfly, bg1Image)
      })
      // 点击事件
      // 加载资源
      this.data.loader.load((progress,resources) => {
        // 资源加载完毕事件
        this.data.resources = resources
        // console.log(progress)
        // let gifSprite = new GIF("./images/sport.gif", resources)
        // gifSprite.sprite.x = 10
        // gifSprite.sprite.y = 10
        // this.data.app.stage.addChild(gifSprite.sprite)
        // 蝴蝶飞舞动画
        this.data.animationList.oneButterfly = TweenMax.fromTo(oneButterfly, 0.8, {y: this.data.screenInfo.h*0.1},{y: this.data.screenInfo.h * 0.104, ease:Linear.easeNone}).repeat(-1)
        this.data.animationList.oneButterfly.play()
        this.data.app.stage.addChild(one)

        // 隐藏掉加载页面
        $('#loadingBox').remove()

        // 显示时钟页面 1.6481
        const clockDom = $('#clock')[0]
        const clockDomHeight = this.data.screenInfo.h * 0.8
        clockDom.style.display = 'block'
        // 根据比例计算时钟合适高度
        clockDom.style.width = clockDomHeight * 1.6481 + 'px'
        clockDom.style.height = clockDomHeight + 'px'

        // 开始加载gif
        this.data.loader.add("./images/sport.gif", {
          loadType: PIXI.loaders.Resource.LOAD_TYPE.XHR,
          xhrType: PIXI.loaders.Resource.XHR_RESPONSE_TYPE.BUFFER,
          crossOrigin:''
        })
        this.data.loader.add("./images/support.gif", {
          loadType: PIXI.loaders.Resource.LOAD_TYPE.XHR,
          xhrType: PIXI.loaders.Resource.XHR_RESPONSE_TYPE.BUFFER,
          crossOrigin:''
        })
        // 群众
        this.data.loader.add("./images/masses.gif", {
          loadType: PIXI.loaders.Resource.LOAD_TYPE.XHR,
          xhrType: PIXI.loaders.Resource.XHR_RESPONSE_TYPE.BUFFER,
          crossOrigin:''
        })
      })
      const shareDom = document.getElementById("shareBox")
      shareDom.ontouchend = function() {
        $('#qr')[0].style.display = 'block'
        shareDom.style.display = 'none'
        return false
      }
      // 屏幕方向改变事件
      window.onorientationchange = function() {
        location.reload()
      }
    },
    methods: {
      // 创建sprite对象
      createSprite: function(name, opt){
        // 获取缩放比例
        const devicePixelRatio = window.devicePixelRatio || 1
        // console.log(devicePixelRatio)
        const newSprite = new PIXI.Sprite.fromImage(name, 1, devicePixelRatio)
        if (opt) {
          for (let key in opt) {
            // console.log(opt[key])
            newSprite[key] = opt[key]
          }
        }
        return newSprite
      },
      smooth: function (baseValue, minValue, nowValue, step) {
        // console.log(nowValue, baseValue + (nowValue - minValue) * step)
        return baseValue + (nowValue - minValue) * step
      },
      // 关闭展示框
      closeShowText: function () {
        this.domList.showTextBox.style.display = 'none'
      },
      closeMusic: function () {
        $('#bgm')[0].pause()
        $('#musicClose').show()
        $('#musicPlay').hide()
      },
      palyMusic: function () {
        $('#bgm')[0].play()
        $('#musicClose').hide()
        $('#musicPlay').show()
      }
    },
    // 注册画板区域并返回设备屏幕信息
    calculationScene: function() {
      // 获取屏幕宽高
      const ww = $(window).width()
      const wh = $(window).height()
      console.log(`可视宽度:${ww}, 可视高度:${wh}`)
      // alert(`可视宽度:${ww}, 可视高度:${wh}`)
      if (ww < wh){
        console.log('竖屏')
        window.document.body.style.width = `${wh}px`
        window.document.body.style.height = `${ww}px`
        window.document.body.classList.add('horizontal')
        window.document.body.style.left = `calc(50% - ${wh / 2}px)`
        window.document.body.style.top = `calc(50% - ${ww / 2}px)`
        window.document.body.style.display = 'block'
        // 获取浏览器缩放比例
        const devicePixelRatio = window.devicePixelRatio || 1
        // 创建画布
        if (!this.data.app) {
          setTimeout(() => {
            this.data.app = new PIXI.Application($(window).height(), $(window).width(), {
              backgroundColor: '0xc8c9c9',
              resolution: devicePixelRatio
            })
            this.data.app.view.style.width = `${wh}px`
            this.data.app.view.style.height = `${ww}px`
            $('#main').append(this.data.app.view)
            this.data.screenInfo = {w: wh, h: ww, transverse: false}
            
          }, 0)
          return {w: wh, h: ww, transverse: false}
          
        }
      } else {
        console.log('横屏')
        window.document.body.classList.remove('horizontal')
        window.document.body.style.width = `${ww}px`
        window.document.body.style.height = `${wh}px`
        window.document.body.style.left = ''
        window.document.body.style.top = ''
        window.document.body.style.display = 'block'
        // 创建画布
        if (!this.data.app) {
          setTimeout(() => {
            // console.log(devicePixelRatio)
            this.data.app = new PIXI.Application($(window).width(), $(window).height(), {
              backgroundColor: '0xc8c9c9',
              resolution: devicePixelRatio
            })
            this.data.app.view.style.width = `${ww}px`
            this.data.app.view.style.height = `${wh}px`
            $('#main').append(this.data.app.view)
            this.data.transverse = true
            this.data.screenInfo = {w: ww, h: wh, transverse: true}
          }, 0)
          
        }
        return {w: ww, h: wh, transverse: true}
      }
      
    },
    // 打开时钟并进入第二部分
    openClock: function (one, oneButterfly, bg1Image) {
      // 移除对时钟的所有事件监听
      $("#clockDial").unbind()
      for( let i = 0 ; i < 35; i++) {
          setTimeout(() => {
            $('#onePoint')[0].style.transform = `rotate(${3 * i}deg)`
          }, i * 10)
        }
        setTimeout(() => {
          $('#clockDial')[0].classList.add(`flip-play`)
          $("#clock").off("touchmove")
          // 销毁蝴蝶
          // 停止蝴蝶动画
          this.data.animationList.oneButterfly.kill()
          // 销毁蝴蝶
          oneButterfly.destroy()
          setTimeout(() => {
            
            $('#main')[0].classList.add('scale-play')
            $('#clock')[0].classList.add('scale-play-forwards')
            // 开启第二部分
            // 动画完毕销毁首页背景
            // 销毁指针
            setTimeout(() => {

              // 销毁tocuh监听
              $("#clock").off("touchstart")
              $('#clock')[0].style.display = 'none'
              // 
              console.log('首页已销毁')
            }, 1200)
            setTimeout(() => {
              this.two()
              bg1Image.destroy()
              this.data.app.stage.removeChild(one)
            }, 1000)
          }, 600)
        }, 500)
    },
    two: function () {
      const bodySize = this.data.screenInfo
      console.log('第二部分!')
      this.data.twoContainer = new PIXI.Container()
      this.data.twoContainer.x = 0
      this.data.twoContainer.y = 0
      this.data.twoContainer.width = this.data.screenInfo.w
      // ----------------------------- 加载文字 -----------------------------

      // this.data.app.stage.addChild(richText)

      // 加载小人 比例
      const peopleH = this.data.screenInfo.h * 0.2
      this.data.people = this.methods.createSprite(`./images/1/1.png`,{
        width: 30 * (this.data.screenInfo.w / 1024),
        height: 120 * (this.data.screenInfo.h / 768),
        x: 50,
        y: 0
      })
      // 不断地切换小人的皮肤
      let peopleIndex = 16
      setInterval(() => {
        // 如果正在移动才切换小人材质
        if (peopleIndex <= 0) {
          peopleIndex = 16
        }
        const groupID = this.data.peopleImgID > 9 ? 9 : this.data.peopleImgID
        const texture = PIXI.Texture.fromFrame(`./images/${groupID}/${peopleIndex}.png`)
        peopleIndex--
        this.data.people.texture = texture
      }, 100)
      // 第二张背景图
      const bg2Image = this.methods.createSprite("./images/2.png",{
        width: this.data.screenInfo.w + 1,
        height: this.data.screenInfo.h,
        x: 0,
        y: 0
      })

      // 向左箭头 5.032
      const leftArrowH = bodySize.h * 0.08
      const leftArrow = this.methods.createSprite("./images/1-hand.png",{
        width: leftArrowH,
        height: leftArrowH,
        x: bodySize.w * 0.6 - (leftArrowH / 2),
        y: bodySize.h * 0.4 - (leftArrowH / 2)
      })
      const leftArrowA = TweenMax.fromTo(leftArrow, 3, {x: bodySize.w * 0.6 - (leftArrowH / 2), alpha: 1},{x: bodySize.w * 0.43 - (leftArrowH / 2), alpha: 0.2}).repeat(-1)
      leftArrowA.play()
      
      // 第三张背景图
      const bg3Image = this.methods.createSprite("./images/3.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w,
        y: 0
      })

      // 熊孩子 0.63
      const childH = this.data.screenInfo.h * 0.55
      const child = this.methods.createSprite("./images/child.png",{
        width: childH * 0.63,
        height: childH,
        x: this.data.screenInfo.w * 1.55 - (childH * 0.63 / 2),
        y: this.data.screenInfo.h - childH
      })

      // 背景线
      const line1 = this.methods.createSprite("./images/line-1.png",{
        width: this.data.screenInfo.w * 11 / 4,
        height: this.data.screenInfo.h,
        x: 0,
        y: 0
      })
      const line2 = this.methods.createSprite("./images/line-2.png",{
        width: this.data.screenInfo.w * 11 / 4,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 11 / 4,
        y: 0
      })
      const line3 = this.methods.createSprite("./images/line-3.png",{
        width: this.data.screenInfo.w * 11 / 4,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 11 / 4 * 2,
        y: 0
      })
      const line4 = this.methods.createSprite("./images/line-4.png",{
        width: this.data.screenInfo.w * 11 / 4,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 11 / 4 * 3,
        y: 0
      })

      // 第五张背景图
      const bg5Image = this.methods.createSprite("./images/5.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 3,
        y: 0
      })

      const bg7Image = this.methods.createSprite("./images/7.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 5,
        y: 0
      })
      const bg9Image = this.methods.createSprite("./images/9.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 7,
        y: 0
      })

      const bg11Image = this.methods.createSprite("./images/11.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 9,
        y: 0
      })

      const bgshare = this.methods.createSprite("./images/share.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 10,
        y: 0
      })
      bgshare.interactive = true;
      bgshare.buttonMode = true

      // 呼唤朋友按钮 3.982
      const shareBTH = this.data.screenInfo.h * 0.1
      const shareBT = this.methods.createSprite("./images/share-button.png",{
        width: shareBTH * 3.982,
        height: shareBTH,
        x: this.data.screenInfo.w * 10.65 - (shareBTH * 3.982 / 2),
        y: this.data.screenInfo.h * 0.78
      })

      

      // 设置可交互
      shareBT.interactive = true;
      shareBT.buttonMode = true
      this.addBind(shareBT, () => {
        $('#shareBox')[0].style.display = 'block'
        setTimeout(() => {
          $('#qr')[0].style.display = 'none'
        }, 0)
        return false
      })

      // 再看一次按钮 3.982
      const againBTH = this.data.screenInfo.h * 0.1
      const againBT = this.methods.createSprite("./images/again.png",{
        width: againBTH * 3.982,
        height: againBTH,
        x: this.data.screenInfo.w * 10.37 - (againBTH * 3.982 /2 ),
        y: this.data.screenInfo.h * 0.78
      })
      // 设置可交互
      againBT.interactive = true;
      againBT.buttonMode = true
      this.addBind(againBT, () => {
        location.reload()
      })

      // ------------------------------------------- 云 -------------------------------------------
      
      // 3云 比例6.397
      const cloud3H = bodySize.h * 0.25
      const cloud3 = this.methods.createSprite("./images/3-cloud.png", {
        width: cloud3H * 6.397,
        height: cloud3H,
        // 位置中间靠上
        x: bodySize.w + (bodySize.w * 0.05),
        y: bodySize.h * 0.1
      })
      // const cloud3AnimationList = new TweenMax(cloud3, 2, {
      //   x: bodySize.w + (bodySize.w * 0.05) + 20,
      //   repeat:-1,
      //   yoyo:true,
      // })
      // cloud3AnimationList.play()

      // 4云 比例2.1159
      const cloud4H = bodySize.h * 0.8
      const cloud4 = this.methods.createSprite("./images/4-cloud.png", {
        width: cloud4H * 2.1159,
        height: cloud4H,
        // 位置中间靠上
        x: bodySize.w * 2,
        y: 0
      })
      const cloud4AnimationList = new TweenMax(cloud4, 10, {
        x: bodySize.w * 2 + 60,
        y: 3,
        repeat:-1,
        yoyo:true,
      })
      cloud4AnimationList.play()
      
      // cloud5 比例4.7467
      const cloud5H = bodySize.h * 0.3
      const cloud5 = this.methods.createSprite("./images/5-cloud.png", {
        width: cloud5H * 4.7467,
        height: cloud5H,
        x: bodySize.w * 3 + (bodySize.w * 0.05),
        y: bodySize.h * 0.1
      })
      // const cloud5AnimationList = new TweenMax(cloud5, 2, {
      //   x: bodySize.w * 3 + (bodySize.w * 0.05) + 20,
      //   repeat:-1,
      //   yoyo:true,
      // })
      // cloud5AnimationList.play()
      

      // 6云 比例2.0727
      const cloud6H = bodySize.h * 0.6
      const cloud6 = this.methods.createSprite("./images/6-cloud.png", {
        width: cloud6H * 2.0727,
        height: cloud6H,
        // 位置中间靠上
        x: bodySize.w * 4 + (bodySize.w * 0.05),
        y: 0
      })
      const cloud6AnimationList = new TweenMax(cloud6, 10, {
        x: bodySize.w * 4 + 60,
        y: 2,
        repeat:-1,
        yoyo:true,
      })
      cloud6AnimationList.play()

      // cloud7 比例5.0339
      const cloud7H = bodySize.h * 0.3
      const cloud7 = this.methods.createSprite("./images/7-cloud.png", {
        width: cloud7H * 5.0339,
        height: cloud7H,
        x: bodySize.w * 5 + (bodySize.w * 0.05),
        y: 0
      })

      // cloud8 比例2.5685
      const cloud8H = bodySize.h * 0.6
      const cloud8 = this.methods.createSprite("./images/8-cloud.png", {
        width: cloud8H * 2.5685,
        height: cloud8H,
        // 位置中间靠上
        x: bodySize.w * 6 + (bodySize.w * 0.05),
        y: bodySize.h * 0.05
      })
      const cloud8AnimationList = new TweenMax(cloud8, 8, {
        x: bodySize.w * 6  + (bodySize.w * 0.05) + 50,
        repeat:-1,
        yoyo:true,
      })
      cloud8AnimationList.play()

      // cloud9 比例3.8078
      const cloud9H = bodySize.h * 0.45
      const cloud9 = this.methods.createSprite("./images/9-cloud.png", {
        width: cloud9H * 3.8078,
        height: cloud9H,
        // 位置中间靠上
        x: bodySize.w * 7 + (bodySize.w * 0.05),
        y: bodySize.h * 0.15
      })


      // cloud10 比例2.1029
      const cloud10H = bodySize.h * 0.6
      const cloud10 = this.methods.createSprite("./images/10-cloud.png", {
        width: cloud10H * 2.1029,
        height: cloud10H,
        // 位置中间靠上
        x: bodySize.w * 8 + (bodySize.w * 0.2),
        y: bodySize.h * 0.15
      })
      const cloud10AnimationList = new TweenMax(cloud10, 11, {
        x: bodySize.w * 8  + (bodySize.w * 0.2) + 70,
        repeat:-1,
        yoyo:true,
      })
      cloud10AnimationList.play()

      // 飘散的花瓣运动 比例1.7130
      const petal11H = bodySize.h * 0.8
      const petal11 = this.methods.createSprite("./images/11-petal.png", {
        width: petal11H * 1.7130,
        height: petal11H,
        // 位置中间靠上
        x: bodySize.w * 9 + (bodySize.w * 0.2),
        y: bodySize.h * 0.15
      })

      // 分享页花瓣 比例1.8293
      const petal12H = bodySize.h * 0.8
      const petal12 = this.methods.createSprite("./images/share-petal-colour.png", {
        width: petal12H * 1.8293,
        height: petal12H,
        // 位置中间靠上
        x: bodySize.w * 10 + (bodySize.w * 0.1),
        y: bodySize.h * 0.15
      })
      const petal12AnimationList = TweenMax.fromTo(petal12, 8, {
          x: bodySize.w * 10  + (bodySize.w * 0.1) - 20,
          y: bodySize.h * 0.15 - 20,
        },{
          x: bodySize.w * 10  + (bodySize.w * 0.1) + 20,
          y: bodySize.h * 0.15 + 40,
        }).repeat(-1)
      petal12AnimationList.play()

      // ------------------------------------------- 亮光 -------------------------------------------
      // 第三张光 比例1
      const threeLightHeight = bodySize.h / 5
      const threeLight = this.methods.createSprite("./images/3-light.png", {
        width: threeLightHeight,
        height: threeLightHeight,
        // 位置中间靠上
        x: bodySize.w + (bodySize.w * 0.67) - (threeLightHeight / 2),
        y: bodySize.h * 0.27
      })
      threeLight.anchor.x = 0.5
      threeLight.anchor.y = 0.5

      // 亮光上的小手
      const Hand3H = bodySize.h * 0.05
      const Hand3 = this.methods.createSprite("./images/light-hand.png", {
        width: Hand3H,
        height: Hand3H,
        // 位置中间靠上
        x: bodySize.w * 1.64 - (Hand3H / 2),
        y: bodySize.h * 0.29
      })
      // 小手闪烁
      Hand3.anchor.x = 0.5
      Hand3.anchor.y = 0.5
      const Hand3A = new TweenMax(Hand3.scale, 1, {
        x: 0.3,
        y: 0.3,
        repeat:-1,
        yoyo:true,
      })
      Hand3A.play()
      
      // 设置可交互
      threeLight.interactive = true;
      threeLight.buttonMode = true
      // 第三张图 亮光触摸事件
      this.addBind(threeLight, () => {
        // 修改背景颜色
        // this.data.app.renderer.backgroundColor = "0x2a99a5"
        gradientColor(this.data.app.renderer,'#c8c9c9','#2a99a5',10)
        bg3Image.destroy()
        // 重新生成新的背景图
        // 第三张背景图
        const newbg3I = this.methods.createSprite('./images/3-colour.png',{
          width: this.data.screenInfo.w,
          height: this.data.screenInfo.h,
          x: this.data.screenInfo.w,
          y: 0
        })
        // 销毁动画
        threeLightAnimationList.kill()
        Hand3A.kill()
        // 销毁掉亮光
        threeLight.destroy()
        Hand3.destroy()
        // 销毁掉云
        cloud3.destroy()
        // cloud3AnimationList.kill()

        // 小男孩想象的东西 1.7756
        const thoughtH = bodySize.h * 0.4
        const thought = this.methods.createSprite("./images/3-thought.png",{
          width: thoughtH * 1.7756,
          height: thoughtH,
          x: bodySize.w * 1.4,
          y: 0
        })
        const thoughtAnimationList = new TweenMax(thought, 2, {
          x: bodySize.w * 1.4 + 5,
          y: 5,
          repeat:-1,
          yoyo:true,
        })
        thoughtAnimationList.play()
        const thoughtStartA = TweenMax.fromTo(thought, 0.6, {x: bodySize.w * 1.6, width: 0, y: bodySize.h * 0.45, height: 0}, {x: bodySize.w * 1.4, y: 0, width: thoughtH * 1.7756, height: thoughtH})
        thoughtStartA.play()
        // 气泡 3.5218
        const bubbleH = bodySize.h * 0.35
        const bubble = this.methods.createSprite("./images/3-bubble.png",{
          width: bubbleH * 3.5218,
          height: bubbleH,
          x: bodySize.w * 1.25,
          y: bodySize.h * 0.02
        })
        const bubbleAnimationList = new TweenMax(bubble, 2, {
          y: bodySize.h * 0.02 + 5,
          repeat:-1,
          yoyo:true,
        })
        bubbleAnimationList.play()
        const bubbleStartA = TweenMax.fromTo(bubble, 0.6, {x: bodySize.w * 1.6, width: 0, y: bodySize.h * 0.45, height: 0}, {x: bodySize.w * 1.25, y: 0.02, width: bubbleH * 3.5218, height: bubbleH})
        bubbleStartA.play()
        // 设置可滚动的区域
        this.setShowPageNumber(4)

        // 幻想的云彩 2.852
        const fantasyH = bodySize.h * 0.48
        const fantasy = this.methods.createSprite("./images/3-fantasy.png",{
          width: fantasyH * 2.852,
          height: fantasyH,
          x: bodySize.w * 1.22,
          y: 0
        })
        
        const fantasyAnimationList = TweenMax.fromTo(fantasy, 0.4, {x: bodySize.w * 1.6, width: 0, y: bodySize.h * 0.45, height: 0}, {x: bodySize.w * 1.22, y: 0, width: fantasyH * 2.852, height: fantasyH})
        fantasyAnimationList.play()

        // 幻想的云彩左右移动
        // const fantasyA2 = new TweenMax(fantasy, 2, {
        //   x: (bodySize.w * 1.22) + 2,
        //   repeat: -1,
        //   yoyo: true,
        //   transformOrigin: 'center'
        // })
        // fantasyA2.play()


        // 小孩想到的星星
        const startH = bodySize.h * 0.45
        const start = this.methods.createSprite("./images/3-start.png",{
          width: startH * 2.5459,
          height: startH,
          x: bodySize.w + bodySize.w * 0.3,
          y: bodySize.h * 0.05
        })
        
        const startAnimationList = TweenMax.fromTo(start, 4, {alpha: 0},{alpha: 1}).repeat(-1)
        startAnimationList.play()

        // 气泡发散效果
        const startA = TweenMax.fromTo(start, 0.8, {
          x: bodySize.w * 1.6,
          y: bodySize.h * 0.45,
          width: 0,
          height: 0
        }, {
          x: bodySize.w * 1.3,
          y: bodySize.h * 0.05,
          width: startH * 2.5459,
          height: startH
        })
        startA.play()

        // 原子
        const atomH = bodySize.h * 0.1
        const atom = this.methods.createSprite("./images/3-atom.png",{
          width: atomH,
          height: atomH,
          x: bodySize.w + bodySize.w * 0.42,
          y: bodySize.h * 0.18
        })
        atom.anchor.x = 0.5
        atom.anchor.y = 0.5
        const atomStartA = TweenMax.fromTo(atom, 0.6, {x: bodySize.w * 1.6, y: bodySize.h * 0.45}, {x: bodySize.w + bodySize.w * 0.42, y: bodySize.h * 0.18}).repeat(0)
        atomStartA.play()
        const atomAnimationList = TweenMax.fromTo(atom.scale, 3, {x: 0.3, y: 0.3}, {x: 0.6, y: 0.6}).repeat(-1)
        
        atomAnimationList.play()

        // 烧瓶
        const flaskH = bodySize.h * 0.12
        const flask = this.methods.createSprite("./images/3-flask.png",{
          width: flaskH * 0.7356,
          height: flaskH,
          x: bodySize.w + bodySize.w * 0.58,
          y: bodySize.h * 0.43
        })
        flask.anchor.x = 0.5
        flask.anchor.y = 1
        const flaskAnimationList = new TweenMax(flask, 2, {
          rotation: 0.5,
          repeat: -1,
          yoyo: true,
          transformOrigin: 'center'
        })
        flaskAnimationList.play()
        const flaskStartA = TweenMax.fromTo(flask, 0.6, {x: bodySize.w * 1.6, y: bodySize.h * 0.45}, {x: bodySize.w * 1.58, y: bodySize.h * 0.43})
        flaskStartA.play()

        // 星球 1.2352
        const starH = bodySize.h * 0.12
        const star = this.methods.createSprite("./images/3-star.png",{
          width: starH * 1.2352,
          height: starH,
          x: bodySize.w + bodySize.w * 0.64,
          y: bodySize.h * 0.2
        })
        star.anchor.x = 0.5
        star.anchor.y = 0.5
        const starAnimationList = new TweenMax(star, 4, {
          rotation: 4,
          repeat:-1,
          yoyo:true,
          transformOrigin:'center'
        })
        starAnimationList.play()
        const starStartA = TweenMax.fromTo(star, 0.6, {x: bodySize.w * 1.6, y: bodySize.h * 0.45}, {x: bodySize.w * 1.64, y: bodySize.h * 0.2})
        starStartA.play()

        // 3-显示更多
        const showMoreH = bodySize.h * 0.1
        const showMore = this.methods.createSprite("./images/showMore.png",{
          width: showMoreH,
          height: showMoreH,
          x: bodySize.w * 1.22,
          y: bodySize.h * 0.52
        })
        const showMoreA = TweenMax.fromTo(showMore, 1.2, {alpha: 0.2},{alpha: 1}).repeat(-1)
        showMoreA.play()
        // 3-显示更多 设置可交互
        showMore.interactive = true;
        showMore.buttonMode = true
        // 第三张图 显示更多触摸事件
        this.addBind(showMore, () => {
          setTimeout(() => {
            this.domList.showTextBox.style.left = "25%"
            this.domList.showTextBox.style.top = "35%"
            this.domList.showTextBox.style.bottom = ''
            this.domList.showTextBox.style.right = ''
            this.domList.textBoxContent.innerText = '做有生命力的教育，教育如阳光更加公平普照，让个体生命怒放。'
            this.domList.showTextBox.style.display = 'block'
          }, 0)
        })

        this.data.twoContainer.addChild(newbg3I, fantasy, thought, start, atom, bubble, flask, star, showMore)
        
        // 3-小人继续移动 ssd
        this.data.clickPeopleRunning = true
        for (let i = 0.407; i < 0.85; i += 0.01) {
          setTimeout(() => {
            this.data.people.x = this.data.screenInfo.w * (1.11 + i)
            if (i < 0.75) {
              // this.data.people.x = this.data.screenInfo.w * (1.11 + i)
              this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6242, 199.7, i * 1000 , 0.00002)
            } else {
              this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6351, 690.233, i * 1000 , -0.0006)
            }
            // 允许滚动
            if (i >= 0.84) {
              this.data.clickPeopleRunning = false
              this.data.peopleCanMoveing = false
            }
          }, i * 4000 - 2300)
        }
        
        // 设置可滚动的区域
        this.setShowPageNumber(4)
      })

      // 第五张光 比例1.6582
      const fiveLightHeight = bodySize.h / 8
      const fiveLight = this.methods.createSprite("./images/5-light.png", {
        width: fiveLightHeight * 1.6582,
        height: fiveLightHeight,
        // 位置中间靠上
        x: bodySize.w * 3 + (bodySize.w * 0.585) - (fiveLightHeight / 2),
        y: bodySize.h * 0.57
      })

      // 亮光上的小手
      const Hand5H = bodySize.h * 0.05
      const Hand5 = this.methods.createSprite("./images/light-hand.png", {
        width: Hand5H,
        height: Hand5H,
        // 位置中间靠上
        x: bodySize.w * 3.634 - (Hand5H / 2),
        y: bodySize.h * 0.65
      })
      // 小手闪烁
      Hand5.anchor.x = 0.5
      Hand5.anchor.y = 0.5
      const Hand5A = new TweenMax(Hand5.scale, 1, {
        x: 0.3,
        y: 0.3,
        repeat:-1,
        yoyo:true,
      })
      Hand5A.play()

      // 设置可交互
      fiveLight.interactive = true;
      fiveLight.buttonMode = true
      // 第五张光 亮光触摸事件
      this.addBind(fiveLight, () => {
        bg5Image.texture = PIXI.Texture.fromFrame('./images/5-colour.png')


        // 修改背景颜色
        gradientColor(this.data.app.renderer,'#c8c9c9','#59d3cb',10)
        // 销毁动画
        fiveLightHeightAnimationList.kill()
        Hand5A.kill()
        // 销毁掉亮光
        fiveLight.destroy()
        Hand5.destroy()
        // 销毁云
        cloud5.destroy()
        // cloud5AnimationList.kill()
        // 设置可滚动的区域
        this.setShowPageNumber(6)

        // 树1在摇摆 0.6937
        const tree1H = bodySize.h * 0.18
        const tree1 = this.methods.createSprite("./images/tree1.png",{
          width: tree1H * 0.6937,
          height: tree1H,
          x: bodySize.w * 3.4 - (tree1H * 0.9223) / 2,
          y: bodySize.h
        })
        tree1.anchor.x = 0.5
        tree1.anchor.y = 1
        const tree1AnimationList = new TweenMax(tree1, 2, {
          rotation: 0.4,
          repeat:-1,
          yoyo:true,
          transformOrigin:'center'
        })
        tree1AnimationList.play()

        // 左边的主树叶 0.5323
        const tree2H = bodySize.h * 0.50
        const tree2 = this.methods.createSprite("./images/tree2.png",{
          width: tree2H * 0.5323,
          height: tree2H,
          x: bodySize.w * 3.2 - (tree2H * 0.5323) / 2,
          y: bodySize.h
        })
        tree2.anchor.x = 0.5
        tree2.anchor.y = 1
        const tree2AnimationList = new TweenMax(tree2, 2, {
          rotation: 0.2,
          repeat:-1,
          yoyo:true
        })
        tree2AnimationList.play()

        // 右边主叶子 0.8517
        const tree3H = bodySize.h * 0.50
        const tree3 = this.methods.createSprite("./images/tree3.png",{
          width: tree3H * 0.8517,
          height: tree3H,
          x: bodySize.w * 4 - (tree3H * 0.8517) / 2,
          y: bodySize.h * 1.02 
        })
        tree3.anchor.x = 0.3
        tree3.anchor.y = 1
        const tree3AnimationList = new TweenMax(tree3, 2, {
          rotation: 0.2,
          repeat:-1,
          yoyo:true
        })
        tree3AnimationList.play()
        
        // 房子拔地而起 0.5904
        const house1H = bodySize.h * 0.50
        const house1 = this.methods.createSprite("./images/house1.png",{
          width: house1H * 0.5904,
          height: house1H,
          x: bodySize.w * 3.6,
          y: bodySize.h * 1.02 
        })
        house1.anchor.x = 0.3
        house1.anchor.y = 1
        const house1AnimationList = TweenMax.fromTo(house1, 1.2, {y: bodySize.h}, {y: bodySize.h * 0.75})
        house1AnimationList.play()

        // 房子拔地而起 0.49011
        const house2H = bodySize.h * 0.40
        const house2 = this.methods.createSprite("./images/house2.png",{
          width: house2H * 0.49011,
          height: house2H,
          x: bodySize.w * 3.25,
          y: bodySize.h * 1.02 
        })
        house2.anchor.x = 0.3
        house2.anchor.y = 1
        const house2AnimationList = TweenMax.fromTo(house2, 1.1, {y: bodySize.h}, {y: bodySize.h * 0.75})
        house2AnimationList.play()

        // 房子拔地而起 0.5904
        const house3H = bodySize.h * 0.42
        const house3 = this.methods.createSprite("./images/house3.png",{
          width: house3H * 0.5904,
          height: house3H,
          x: bodySize.w * 3.5,
          y: bodySize.h * 1.02 
        })
        house3.anchor.x = 0.3
        house3.anchor.y = 1
        const house3AnimationList = TweenMax.fromTo(house3, 0.8, {y: bodySize.h}, {y: bodySize.h * 0.75})
        house3AnimationList.play()

        // 1.034
        const house4H = bodySize.h * 0.3
        const house4 = this.methods.createSprite("./images/house4.png",{
          width: house4H * 1.034,
          height: house4H,
          x: bodySize.w * 3.7,
          y: bodySize.h * 1.02 
        })
        house4.anchor.x = 0.3
        house4.anchor.y = 1
        const house4AnimationList = TweenMax.fromTo(house4, 0.6, {y: bodySize.h}, {y: bodySize.h * 0.75})
        house4AnimationList.play()

        // 1.4926
        const house5H = bodySize.h * 0.3
        const house5 = this.methods.createSprite("./images/house5.png",{
          width: house5H * 1.4926,
          height: house5H,
          x: bodySize.w * 3.33,
          y: bodySize.h * 1.01
        })
        house5.anchor.x = 0.3
        house5.anchor.y = 1
        const house5AnimationList = TweenMax.fromTo(house5, 1.4, {y: bodySize.h}, {y: bodySize.h * 0.75})
        house5AnimationList.play()

        // 5-显示更多
        const showMoreH = bodySize.h * 0.1
        const showMore = this.methods.createSprite("./images/showMore.png",{
          width: showMoreH,
          height: showMoreH,
          x: bodySize.w * 3.27,
          y: bodySize.h * 0.16
        })
        const showMoreA = TweenMax.fromTo(showMore, 1.2, {alpha: 0.2},{alpha: 1}).repeat(-1)
        showMoreA.play()
        // 显示更多 设置可交互
        showMore.interactive = true;
        showMore.buttonMode = true
        // 第三张图 显示更多触摸事件
        this.addBind(showMore, () => {
          setTimeout(() => {
            this.domList.showTextBox.style.left = "34%"
            this.domList.showTextBox.style.top = "20%"
            this.domList.showTextBox.style.bottom = ''
            this.domList.showTextBox.style.right = ''
            this.domList.textBoxContent.innerText = '“人”、“地”和谐发展，城市有温度，人民更幸福。'
            this.domList.showTextBox.style.display = 'block'
          }, 0)
        })

        this.data.twoContainer.addChild(house4, house1, house5, house3, house2, bg5Image, tree1, tree2, tree3, showMore)
        
        // 5-小人继续移动
        this.data.clickPeopleRunning = true
        for (let i = 0.52; i < 0.72; i+= 0.005) {
          setTimeout(() => {
            this.data.people.x = this.data.screenInfo.w * (3.11 + i)
            this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3737, 0, i * 1000 , -0.00006)
            // 允许滚动
            if (i >= 0.7) {
              this.data.peopleCanMoveing = false
              this.data.clickPeopleRunning = false
            }
          }, i * 4000 - 2000)
        }
      })

      // 第七张图 比例:0.7421
      const sevenLightHeight = bodySize.h / 5
      const sevenLight = this.methods.createSprite("./images/7-light.png", {
        width: sevenLightHeight * 0.7421,
        height: sevenLightHeight,
        // 位置中间靠上
        x: bodySize.w * 5 + (bodySize.w * 0.33) - (sevenLightHeight / 2),
        y: bodySize.h * 0.57
      })

      // 亮光上的小手
      const Hand7H = bodySize.h * 0.05
      const Hand7 = this.methods.createSprite("./images/light-hand.png", {
        width: Hand7H,
        height: Hand7H,
        // 位置中间靠上
        x: bodySize.w * 5.34 - (Hand7H / 2),
        y: bodySize.h * 0.70
      })
      // 小手闪烁
      Hand7.anchor.x = 0.5
      Hand7.anchor.y = 0.5
      const Hand7A = new TweenMax(Hand7.scale, 1, {
        x: 0.3,
        y: 0.3,
        repeat:-1,
        yoyo:true,
      })
      Hand7A.play()

      // 设置可交互
      sevenLight.interactive = true;
      sevenLight.buttonMode = true
      // 第七张光 亮光触摸事件
      this.addBind(sevenLight, () => {
        // 修改背景颜色
        gradientColor(this.data.app.renderer,'#c8c9c9','#dccfbc',10)
        // this.data.app.renderer.backgroundColor = "0xdccfbc"
        bg7Image.texture = PIXI.Texture.fromFrame('./images/7-colour.png')
        // 销毁动画
        sevenLightHeightAnimationList.kill()
        Hand7A.kill()
        // 销毁掉亮光
        sevenLight.destroy()
        Hand7.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(8)
        
        const cloud7AnimationList = new TweenMax(cloud7, 2, {
          x: bodySize.w * 5 + (bodySize.w * 0.05) + 20,
          repeat:-1,
          yoyo:true,
        })
        cloud7AnimationList.play()

        // 从下面生出政府的手 0.8511
        const supportH = bodySize.h * 0.7
        let support = new GIF("./images/support.gif", this.data.resources)
        support.sprite.width = supportH * 0.8511
        support.sprite.height = supportH
        support.sprite.x = bodySize.w * 5 - (supportH * 0.8511 / 2) + bodySize.w * 0.5
        support.sprite.y = bodySize.h
        const supportAnimationList = TweenMax.fromTo(support.sprite, 1.5, {y: bodySize.h},{y: bodySize.h - supportH})
        supportAnimationList.play()
        setTimeout(() => {
          support.play()
        }, 500)

        // 7-显示更多
        const showMoreH = bodySize.h * 0.1
        const showMore = this.methods.createSprite("./images/showMore.png",{
          width: showMoreH,
          height: showMoreH,
          x: bodySize.w * 5.29,
          y: bodySize.h * 0.30
        })
        const showMoreA = TweenMax.fromTo(showMore, 1.2, {alpha: 0.2},{alpha: 1}).repeat(-1)
        showMoreA.play()
        // 显示更多 设置可交互
        showMore.interactive = true;
        showMore.buttonMode = true
        // 第三张图 显示更多触摸事件
        this.addBind(showMore, () => {
          setTimeout(() => {
            this.domList.showTextBox.style.left = "32%"
            this.domList.showTextBox.style.top = "16%"
            this.domList.showTextBox.style.bottom = ''
            this.domList.showTextBox.style.right = ''
            this.domList.textBoxContent.innerText = '从容之中见温馨，夕阳的壮美比朝霞更浑厚。'
            this.domList.showTextBox.style.display = 'block'
          }, 0)
        })

        this.data.twoContainer.addChild(support.sprite, showMore)
        // 允许滚动
        // 7-小人继续移动
        this.data.clickPeopleRunning = true
        for (let i = 0.2; i < 0.72; i+= 0.005) {
          setTimeout(() => {
            this.data.people.x = this.data.screenInfo.w * (5.11 + i)
            if (i < 0.42) {
              this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.36, 0, i * 1000, -0.00001)
              // console.log(this.data.people.y, this.methods.smooth(0.36, 0, i * 1000, -0.00001))
            } else {
              this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3558, 420, i * 1000, 0.00025)
            }
            // 允许滚动
            if (i >= 0.7) {
              this.data.peopleCanMoveing = false
              this.data.clickPeopleRunning = false
            }
          }, i * 2000 - 400)
        }
      })

      // 第九张图 比例:1
      const Light9Height = bodySize.h / 5
      const Light9 = this.methods.createSprite("./images/9-light.png", {
        width: Light9Height,
        height: Light9Height,
        // 位置中间靠上
        x: bodySize.w * 7 + (bodySize.w * 0.57) - (sevenLightHeight / 2),
        y: bodySize.h * 0.065
      })
      // 亮光上的小手
      const Hand9H = bodySize.h * 0.05
      const Hand9 = this.methods.createSprite("./images/light-hand.png", {
        width: Hand9H,
        height: Hand9H,
        // 位置中间靠上
        x: bodySize.w * 7.59 - (Hand9H / 2),
        y: bodySize.h * 0.18
      })

      // 九-小手闪烁
      Hand9.anchor.x = 0.5
      Hand9.anchor.y = 0.5
      const Hand9A = new TweenMax(Hand9.scale, 1, {
        x: 0.3,
        y: 0.3,
        repeat:-1,
        yoyo:true,
      })
      Hand9A.play()

      // 设置可交互
      Light9.interactive = true;
      Light9.buttonMode = true
      // 第五张光 亮光触摸事件
      this.addBind(Light9, () => {
        // 修改背景颜色
        gradientColor(this.data.app.renderer,'#c8c9c9','#f6df60',10)
        // this.data.app.renderer.backgroundColor = "0xfae768"
        bg9Image.texture = PIXI.Texture.fromFrame('./images/9-colour.png')
        // 销毁动画
        Light9AnimationList.kill()
        Hand9A.kill()
        // 销毁掉亮光
        Light9.destroy()
        Hand9.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(10)
        
        const cloud9AnimationList = new TweenMax(cloud9, 2, {
          x: bodySize.w * 7  + (bodySize.w * 0.05) + 20,
          repeat:-1,
          yoyo:true,
        })
        cloud9AnimationList.play()

        // bird9 比例2.7795
        const bird9H = bodySize.h * 0.3
        const bird9 = this.methods.createSprite("./images/9-bird.png", {
          width: bird9H * 2.7795,
          height: bird9H,
          // 位置中间靠上
          x: bodySize.w * 7.1,
          y: bodySize.h * 0.22
        })

        const bird9A = new TweenMax(bird9, 4, {
          y: bodySize.h * 0.25 - 20,
          repeat:-1,
          yoyo:true
        })
        bird9A.play()

        // 9-显示更多
        const showMoreH = bodySize.h * 0.1
        const showMore = this.methods.createSprite("./images/showMore2.png",{
          width: showMoreH,
          height: showMoreH,
          x: bodySize.w * 7.75,
          y: bodySize.h * 0.05
        })
        const showMoreA = TweenMax.fromTo(showMore, 1.2, {alpha: 0.2},{alpha: 1}).repeat(-1)
        showMoreA.play()
        // 显示更多 设置可交互
        showMore.interactive = true;
        showMore.buttonMode = true

        // 显示更多触摸事件
        this.addBind(showMore, () => {
          setTimeout(() => {
            this.domList.showTextBox.style.right = "22%"
            this.domList.showTextBox.style.top = "18%"
            this.domList.showTextBox.style.bottom = ''
            this.domList.showTextBox.style.left = ''
            this.domList.textBoxContent.innerText = '一头系着贫，一头系着富，把社会捆绑结实。'
            this.domList.showTextBox.style.display = 'block'
          }, 0)
        })

        // 群众向上拉 1.22
        const massesH = bodySize.h * 0.65
        let masses = new GIF("./images/masses.gif", this.data.resources)
        masses.sprite.width = massesH * 1.22
        masses.sprite.height = massesH
        masses.sprite.x = bodySize.w * 7.56 - (massesH * 1.22 / 2)
        masses.sprite.y = bodySize.h * 0.555 - (massesH / 2)

        this.data.twoContainer.addChild(bird9, showMore, masses.sprite)
        setTimeout(() => {
          masses.play()
        }, 500)
        // 允许滚动
        for (let i = 0.36; i < 0.85; i+= 0.005) {
          setTimeout(() => {
            this.data.people.x = this.data.screenInfo.w * (7.11 + i)
            if (i < 0.4) {
              this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5, 187.59, i * 1000, -0.00002)
              // console.log(this.data.people.y, this.methods.smooth(0.5, 187.59, i * 1000, -0.00002))
            } else {
              this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.51, 185.9, i * 1000, 0.00001)
            }
            // 允许滚动
            if (i >= 0.7) {
              this.data.peopleCanMoveing = false
              this.data.clickPeopleRunning = false
            }
          }, i * 3000 - 1080)
        }
      })

      // 第11张图 大柚子 比例:1
      const Light11Height = bodySize.h / 1.5
      // console.log((bodySize.h / bodySize.w))
      const Light11 = this.methods.createSprite("./images/11-light.png", {
        width: Light11Height,
        height: Light11Height,
        // 位置中间靠上
        x: bodySize.w * 9 + (bodySize.w * 0.39) - (sevenLightHeight / 2),
        y: bodySize.h * 0.09
      })
      // 拖着的手
      const handH = bodySize.h / 1.3
      const hand = this.methods.createSprite("./images/hand.png", {
        width: handH,
        height: handH,
        // 位置中间靠上
        x: bodySize.w * 9 + (bodySize.w * 0.35) - (sevenLightHeight / 2),
        y: bodySize.h * 0.065
      })

      // 亮光上的小手
      const Hand11H = bodySize.h * 0.08
      const Hand11 = this.methods.createSprite("./images/light-hand.png", {
        width: Hand11H,
        height: Hand11H,
        // 位置中间靠上
        x: bodySize.w * 9.55 - (Hand11H / 2),
        y: bodySize.h * 0.48
      })

      // 九-小手闪烁
      Hand11.anchor.x = 0.5
      Hand11.anchor.y = 0.5
      const Hand11A = new TweenMax(Hand11.scale, 1, {
        x: 0.4,
        y: 0.4,
        repeat:-1,
        yoyo:true,
      })
      Hand11A.play()
      
      // 设置可交互
      Hand11.interactive = true;
      Hand11.buttonMode = true
      // 第五张光 亮光触摸事件
      this.addBind(Hand11, () => {
        // 修改背景颜色
        this.data.app.renderer.backgroundColor = "0xcfdee5"
        bg11Image.texture = PIXI.Texture.fromFrame('./images/11-colour.png')
        // 替换彩色花瓣材质
        petal11.texture = PIXI.Texture.fromFrame('./images/11-petal-colour.png')
        // 销毁动画
        Light11AnimationList.kill()
        Hand11A.kill()
        // 销毁掉亮光
        Light11.destroy()
        Hand11.destroy()
        // 销毁掉手
        hand.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(11)

        // 从左面生出树叶 0.8106
        const grass1H = bodySize.h * 0.9
        const grass1 = this.methods.createSprite("./images/grass1.png",{
          width: grass1H * 0.8106,
          height: grass1H,
          x: bodySize.w * 9,
          y: bodySize.h * 0.1
        })
        const grass1AnimationList = TweenMax.fromTo(grass1, 1, {x: bodySize.w * 9 - grass1H * 0.8106},{x: bodySize.w * 9})
        grass1AnimationList.play()

        // 从上生出树叶 2.4909
        const grass2H = bodySize.h * 0.4
        const grass2 = this.methods.createSprite("./images/grass2.png",{
          width: grass2H * 2.4909,
          height: grass2H,
          x: bodySize.w * 10 - grass2H * 2.4909,
          y: -grass2H
        })
        const grass2AnimationList = TweenMax.fromTo(grass2, 1, {y: -grass2H},{y: 0})
        grass2AnimationList.play()

        // 从右下出的树叶 1.5402
        const grass3H = bodySize.h * 0.2
        const grass3 = this.methods.createSprite("./images/grass3.png",{
          width: grass3H * 1.5402,
          height: grass3H,
          x: bodySize.w * 10 + 2 * grass3H * 1.5402,
          y: bodySize.h
        })
        const grass3AnimationList = TweenMax.fromTo(grass3, 1, {x: bodySize.w * 10, y: bodySize.h},{x: bodySize.w * 10 - grass3H * 1.5402 / 2, y: bodySize.h * 1.03})
        grass3AnimationList.play()
        // 树叶摆动效果
        grass3.anchor.x = 0.5
        grass3.anchor.y = 1
        const grass3AnimationList2 = new TweenMax(grass3, 2, {
          y: bodySize.h * 1.025,
          repeat:-1,
          yoyo:true
        })
        grass3AnimationList2.play()


        const petal11AnimationList = TweenMax.fromTo(petal11, 8, {
            x: bodySize.w * 9  + (bodySize.w * 0.2) - 20,
            y: bodySize.h * 0.15 - 20,
          },{
            x: bodySize.w * 9  + (bodySize.w * 0.2) + 20,
            y: bodySize.h * 0.15 + 40,
          }).repeat(-1)
        petal11AnimationList.play()

        // 11-显示更多
        const showMoreH = bodySize.h * 0.1
        const showMore = this.methods.createSprite("./images/showMore2.png",{
          width: showMoreH,
          height: showMoreH,
          x: bodySize.w * 9.80,
          y: bodySize.h * 0.82
        })
        const showMoreA = TweenMax.fromTo(showMore, 1.2, {alpha: 0.2},{alpha: 1}).repeat(-1)
        showMoreA.play()
        // 显示更多 设置可交互
        showMore.interactive = true;
        showMore.buttonMode = true

        // 显示更多触摸事件
        this.addBind(showMore, () => {
          setTimeout(() => {
            this.domList.showTextBox.style.top = ''
            this.domList.showTextBox.style.right = ''
            this.domList.showTextBox.style.left = "40%"
            this.domList.showTextBox.style.bottom = "13%"
            this.domList.textBoxContent.innerText = '爱心缔造家园，践行绿色生活，共创美丽中国。'
            this.domList.showTextBox.style.display = 'block'
          }, 0)
        })



        // 11-手托着地球 1.1212
        const earthH = bodySize.h * 0.7
        let earth = new GIF("./images/earth.gif", this.data.resources, true)
        earth.sprite.width = earthH * 1.22
        earth.sprite.height = earthH
        earth.sprite.x = bodySize.w * 9.5 - (earthH * 1.22 / 2)
        earth.sprite.y = bodySize.h * 0.5 - (earthH / 2)
        setTimeout(() => {
          earth.play()
        }, 500)

        this.data.twoContainer.addChild(earth.sprite, grass1, grass2, grass3, showMore)

        // 13-小人继续移动
        this.data.clickPeopleRunning = true
        for (let i = 0.407; i < 0.65; i+= 0.005) {
          setTimeout(() => {
            this.data.people.x = this.data.screenInfo.w * (9.11 + i)
            this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.407, 0, i * 1000, 0.00012)
            // 允许滚动
            if (i >= 0.64) {
              this.data.clickPeopleRunning = false
              this.data.peopleCanMoveing = false
            }
          }, i * 4000 - 1600)
        }
      })
      // 小人跳舞
      const sportH = bodySize.h * 0.14
      let sport = new GIF("./images/sport.gif", this.data.resources)
      sport.sprite.width = sportH * 1.0775
      sport.sprite.height = sportH
      sport.sprite.x = bodySize.w * 10.88 - (sportH * 1.0775 / 2)
      sport.sprite.y = bodySize.h * 0.43 - (sportH / 2)

      

      // 添加背景
      this.data.twoContainer.addChild(line1, line2, line3, line4, bg3Image, this.data.people, child, bg2Image, leftArrow, threeLight, Hand3, bg5Image, bg7Image, bg9Image, bg11Image, bgshare, Light11, hand, fiveLight, Hand5, sevenLight, Hand7, Light9, Hand9, Hand11, shareBT, againBT, sport.sprite)
      setTimeout(() => {
        sport.play()
      }, 2000)
      // 添加云
      this.data.twoContainer.addChild(cloud3, cloud4, cloud5, cloud6, cloud7, cloud8, cloud9, cloud10, petal11, petal12)
      this.data.app.stage.addChild(this.data.twoContainer)
      
      // 三-亮光闪烁
      const threeLightAnimationList = TweenMax.fromTo(threeLight, 1, {alpha: 0},{alpha: 1}).repeat(-1).repeatDelay(1)
      threeLightAnimationList.play()

      // 五-亮光闪烁
      const fiveLightHeightAnimationList = TweenMax.fromTo(fiveLight, 1, {alpha: 0},{alpha: 1}).repeat(-1).repeatDelay(1)
      fiveLightHeightAnimationList.play()

      // 七-亮光闪烁
      const sevenLightHeightAnimationList = TweenMax.fromTo(sevenLight, 1, {alpha: 0},{alpha: 1}).repeat(-1).repeatDelay(1)
      sevenLightHeightAnimationList.play()

      // 九-亮光闪烁
      const Light9AnimationList = TweenMax.fromTo(Light9, 1, {alpha: 0},{alpha: 1}).repeat(-1).repeatDelay(1)
      Light9AnimationList.play()

      // 十一-亮光闪烁
      const Light11AnimationList = TweenMax.fromTo(Light11, 2, {alpha: 0},{alpha: 1}).repeat(-1).repeatDelay(1.5)
      Light11AnimationList.play()

      this.scrollBegin()
    },
    scrollBegin: function () {
      console.log('注册scroll!')
      const transverse = this.data.screenInfo.transverse
      
      this.data.scroller = new Scroller((left, top, zoom) => {
        const scrollNumber = transverse ? left: top
        // 设置整个页面的x
        // console.log(this.data.twoContainer)
        this.data.twoContainer.x = -scrollNumber
        const peopleX = scrollNumber + 50 * (1024 / this.data.screenInfo.w)
        // 设置小人的图片
        this.setPeopleImg(peopleX)
        // console.log(scrollNumber)
        // 小球移动轨迹
        // console.log('sd')
        this.setPeopleY(peopleX)
      }, {
        zooming: true,
        bouncing: false
      })
      // 设置可滚动的区域
      this.setShowPageNumber(2)
      // 监听鼠标事件
      this.mouseEvent()
      
    },
    // 设置可以拖动的屏幕数量
    setShowPageNumber: function (number) {
      // 设置进度
      this.data.progress = number
      const transverse = this.data.screenInfo.transverse
      // 根据横屏还是竖屏 设置滚动区域
      if (transverse) {
        // 横屏
        this.data.scroller.setDimensions(this.data.screenInfo.w, this.data.screenInfo.h, this.data.screenInfo.w * number, this.data.screenInfo.h)
      } else {
        this.data.scroller.setDimensions(this.data.screenInfo.h, this.data.screenInfo.w, this.data.screenInfo.h, this.data.screenInfo.w * number)
      }
    },
    // 计算并设置小人Y坐标
    setPeopleY: function (X) {
      // 当时是在屏幕分辨率为1024*768做的 所以要计算换算为真实屏幕
      // console.log(peopleX / this.data.screenInfo.w)
      const peopleX = X * (1024 / this.data.screenInfo.w)
      const pageIndex = (X - 50 / this.data.screenInfo.w * 1024) / this.data.screenInfo.w
      // 记录最大到达的点
      if (this.data.xMax < peopleX) this.data.xMax = peopleX
      // console.log(pageIndex, this.data.progress)
      // console.log(pageIndex, this.data.xMax + this.data.screenInfo.w * 1.11)
      // console.log(this.data.peopleCanMoveing)
      // 第三幅图小人移动到光圈下
      // 1 - 1.52区域小人不接受移动指令
      
      if (pageIndex >= 1 && pageIndex <= 1.9) {
        // 保证返回的时候不会不流畅
        if (this.data.progress === 2) {
          this.data.app.renderer.backgroundColor = '0xc8c9c9'
          this.peopleMove1(pageIndex)
          return
        } else if (this.data.xMax < 2010) {
          return
        }
      }
      // sdd
      if (pageIndex >= 3 && pageIndex <= 3.78) {
        // 保证返回的时候不会不流畅
        if (this.data.progress === 4) {
          this.data.app.renderer.backgroundColor = '0xc8c9c9'
          this.peopleMove2(pageIndex)
          return
        } else if (this.data.xMax < 3910) {
          return
        }
      }
      if (pageIndex >= 5 && pageIndex <= 5.75) {
        // 保证返回的时候不会不流畅
        if (this.data.progress === 6) {
          this.data.app.renderer.backgroundColor = '0xc8c9c9'
          this.peopleMove3(pageIndex)
          return
        } else if (this.data.xMax < 5960) {
          return
        }
      }
      if (pageIndex >= 7 && pageIndex <= 7.85) {
        // 保证返回的时候不会不流畅
        if (this.data.progress === 8) {
          this.data.app.renderer.backgroundColor = '0xc8c9c9'
          this.peopleMove4(pageIndex)
          return
        } else if (this.data.xMax < 8218) {
          return
        }
      }
      if (pageIndex >= 9 && pageIndex <= 9.65) {
        // 保证返回的时候不会不流畅
        if (this.data.progress === 10) {
          this.data.app.renderer.backgroundColor = '0xc8c9c9'
          this.peopleMove5(pageIndex)
          return
        } else if (this.data.xMax < 10005) {
          return
        }
      }
      // console.log(peopleX)
      if (peopleX < 188) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.25, 0, peopleX, 0.001)
      } else if (peopleX < 390) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.438, 188, peopleX, 0.0007)
      } else if (peopleX < 560) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5794, 390, peopleX, 0.00025)
      } else if (peopleX < 687) {
        // console.log(peopleX, this.methods.smooth(0.6219, 560, peopleX, -0.0003))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6219, 560, peopleX, -0.0001)
      } else if (peopleX < 966) {
        // console.log(peopleX, this.methods.smooth(0.5840, 687, peopleX, -0.001))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6, 687, peopleX, -0.001)
      } else if (peopleX < 1125) {
        // console.log(peopleX, this.methods.smooth(0.3075, 966, peopleX, -0.0004))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3075, 966, peopleX, -0.0006)
      } else if (peopleX < 1167) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2133, 1125, peopleX, -0.00005)
      } else if (peopleX < 1412) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2112, 1167, peopleX, 0.0005)
      } else if (peopleX < 1591) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3337, 1412, peopleX, 0.001)
      } else if (peopleX < 1744) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5136, 1591, peopleX, 0.0006)
      } else if (peopleX < 1844) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6054, 1744, peopleX, 0.0001)
      } else if (peopleX < 2017) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6122, 1844, peopleX, -0.0005)
      } else if (peopleX < 2238) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5257, 2017, peopleX, -0.001)
      } else if (peopleX < 2386) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3050, 2238, peopleX, -0.0006)
      } else if (peopleX < 2530) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.1980, 2386, peopleX, -0.0002)
      } else if (peopleX < 2679) {
        let startColor = '#c8c9c9'
        // 根据前进还是后退做不同处理 倒退的时候没有灰色
        if (this.data.xMax > 3299) startColor = '#59d3cb'
        this.data.app.renderer.backgroundColor = gradientColor2(startColor, '#2a99a5', 15, Math.floor((2679 - peopleX) / 10))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.1690, 2530, peopleX, 0.00015)
      } else if (peopleX < 3299) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.1911, 2679, peopleX, 0.0006)
      } else if (peopleX < 3777) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5635, 3299, peopleX, -0.00045)
      } else if (peopleX < 3969) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.35, 3777, peopleX, -0.0001)
      } else if (peopleX < 4317) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3308, 3969, peopleX, 0.0002)
      } else if (peopleX < 4614) {
        // console.log(peopleX, this.methods.smooth(0.3995, 4317, peopleX, 0.00055))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3995, 4317, peopleX, 0.00055)
      } else if (peopleX < 4944) {
        let startColor = '#c8c9c9'
        // 根据前进还是后退做不同处理 倒退的时候没有灰色
        if (this.data.xMax > 5084) startColor = '#dccfbc'
        this.data.app.renderer.backgroundColor = gradientColor2( startColor, '#59d3cb', 34, Math.floor((4944 - peopleX) / 10))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5582, 4614, peopleX, 0.00035)
      } else if (peopleX < 5084) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.673, 4944, peopleX, -0.0005)
      } else if (peopleX < 5352) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6028, 5084, peopleX, -0.0008)
      } else if (peopleX < 5521) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3888, 5352, peopleX, -0.0003)
      } else if (peopleX < 5638) {
        // console.log(peopleX, this.methods.smooth(0.3438, 5521, peopleX, -0.0002))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3438, 5521, peopleX, -0.0002)
      } else if (peopleX < 5946) {
        // console.log(peopleX, this.methods.smooth(0.3205, 5638, peopleX, 0.0003))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3205, 5638, peopleX, 0.0003)
      } else if (peopleX < 6295) {
        // console.log(peopleX, this.methods.smooth(0.4089, 5946, peopleX, 0.0007))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.4089, 5946, peopleX, 0.0007)
      } else if (peopleX < 6443) {
        // console.log(peopleX, this.methods.smooth(0.6501, 6295, peopleX, 0.0005))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6501, 6295, peopleX, 0.0005)
      } else if (peopleX < 6674) {
        // console.log(peopleX, this.methods.smooth(0.7233, 6443, peopleX, 0.00008))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.7233, 6443, peopleX, 0.00008)
      } else if (peopleX < 7042) {
        let startColor = '#c8c9c9'
        // 根据前进还是后退做不同处理 倒退的时候没有灰色
        if (this.data.xMax > 7356) startColor = '#f6df60'
        this.data.app.renderer.backgroundColor = gradientColor2(startColor, '#dccfbc', 37, Math.floor((7042 - peopleX) / 10))
        // console.log(peopleX, this.methods.smooth(0.7418, 6674, peopleX, -0.00001))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.7418, 6443, peopleX, -0.00001)
      } else if (peopleX < 7356) {
        // console.log(peopleX, this.methods.smooth(0.7292, 7042, peopleX, -0.00025))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.7381, 7042, peopleX, -0.00025)
      } else if (peopleX < 7610) {
        // console.log(peopleX, this.methods.smooth(0.6509, 7356, peopleX, -0.0005))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6509, 7356, peopleX, -0.0005)
      } else if (peopleX < 7723) {
        // console.log(peopleX, this.methods.smooth(0.5258, 7610, peopleX, -0.0002))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5258, 7610, peopleX, -0.0002)
      } else if (peopleX < 8143) {
        // console.log(peopleX, this.methods.smooth(0.4850, 7723, peopleX, 0.0001))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.4850, 7723, peopleX, 0.0001)
      } else if (peopleX < 8383) {
        // console.log(peopleX, this.methods.smooth(0.4850, 7723, peopleX, 0.00005))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5268, 8143, peopleX, -0.00005)
      } else if (peopleX < 9303) {
        let startColor = '#c8c9c9'
        // 根据前进还是后退做不同处理 倒退的时候没有灰色
        if (this.data.xMax > 10025) startColor = '#cfdee5'
        this.data.app.renderer.backgroundColor = gradientColor2(startColor, '#f6df60', 93, Math.floor((9303 - peopleX) / 10))
        // console.log(peopleX, this.methods.smooth(0.5178, 8383, peopleX, -0.00024))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5178, 8383, peopleX, -0.00024)
      } else if (peopleX < 10025) {
        // console.log(peopleX, this.methods.smooth(0.2973, 9303, peopleX, 0.00029))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2973, 9303, peopleX, 0.00029)
      } else if (peopleX < 10208) {
        // 小人慢慢消失出现
        const peopleData = this.methods.smooth(0, peopleX, 10208, 0.01)
        if (peopleData >= 0) {
          this.data.people.alpha = peopleData
        }
        // console.log(peopleX, this.methods.smooth(0.5065, 10025, peopleX, -0.0002))
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5065, 10025, peopleX, -0.0002)
      } else {
        // 小人慢慢消失出现
        const peopleData = this.methods.smooth(0, peopleX, 10208, 0.01)
        if (peopleData < 0) {
          this.data.people.alpha = 0
        }
        // 如果是前进姿态
        // console.log(peopleX, this.methods.smooth(0.4697, 10208, peopleX, -0.0008))
        // if (this.data.xMax > 10300 && peopleX < 10300 && this.data.app.renderer.backgroundColor !== '#cfdee5') {
        //   this.data.app.renderer.backgroundColor = gradientColor2( '#cfdee5', '#c8c9c9', 10, Math.floor((10300 - peopleX) / 10))
        // }
        // 计算得到比率
        const pageIndex = (X - 50 / this.data.screenInfo.w * 1024) / this.data.screenInfo.w
        // console.log(pageIndex)
        // console.log(ratioB)
        // 二维码问题
        if (pageIndex === 10) {
          $('#qr')[0].style.display = 'block'
        } else {
          $('#qr')[0].style.display = 'none'
        }
        
      }
      // 移动小人
      this.data.people.x = X
    },
    setPeopleImg: function (peopleX) {
      const peopleID = Math.ceil(peopleX / this.data.screenInfo.w)
      if (this.data.peopleImgID !== peopleID) {
        this.data.peopleImgID = peopleID
      }
    },
    // 移动屏幕鼠标事件
    mouseEvent: function () {
      // console.log(this.data.scroller)
      $('canvas')[0].addEventListener("touchstart", (e) => {
        // 隐藏掉提示条
        this.domList.showTextBox.style.display = 'none'
        if (this.data.peopleCanMoveing) return
        this.data.scroller.doTouchStart(e.touches, e.timeStamp)
        this.data.mousedown = true
      }, false)

      $('canvas')[0].addEventListener("touchmove", (e) => {
        if (this.data.peopleCanMoveing) return
        if (!this.data.mousedown) {
          return
        }
        // console.log(e.touches, e.timeStamp)
        this.data.scroller.doTouchMove(e.touches, e.timeStamp);
        this.data.mousedown = true
      }, false);

      $('canvas')[0].addEventListener("touchend", (e) => {
        if (this.data.peopleCanMoveing) return
        if (!this.data.mousedown) {
          return
        }
        this.data.scroller.doTouchEnd(e.timeStamp)
        this.data.mousedown = false
      }, false)
      $('canvas')[0].addEventListener("mousedown", (e) => {
        // 隐藏掉提示条
        this.domList.showTextBox.style.display = 'none'
        if (this.data.peopleCanMoveing) return
        this.data.scroller.doTouchStart([e], e.timeStamp)
        this.data.mousedown = true
      }, false)

      $('canvas')[0].addEventListener("mousemove", (e) => {
        if (this.data.peopleCanMoveing) return
        if (!this.data.mousedown) {
          return
        }
        // console.log(e.touches, e.timeStamp)
        this.data.scroller.doTouchMove([e], e.timeStamp);
        this.data.mousedown = true
      }, false);

      $('canvas')[0].addEventListener("mouseup", (e) => {
        if (this.data.peopleCanMoveing) return
        if (!this.data.mousedown) {
          return
        }
        this.data.scroller.doTouchEnd(e.timeStamp)
        this.data.mousedown = false
      }, false)
      $('#qr')[0].addEventListener("touchstart", (e) => {
        if (this.data.peopleCanMoveing) return
        this.data.scroller.doTouchStart(e.touches, e.timeStamp)
        this.data.mousedown = true
      }, false)

      $('#qr')[0].addEventListener("touchmove", (e) => {
        if (this.data.peopleCanMoveing) return
        if (!this.data.mousedown) {
          return
        }
        // console.log(e.touches, e.timeStamp)
        this.data.scroller.doTouchMove(e.touches, e.timeStamp);
        this.data.mousedown = true
      }, false);

      $('#qr')[0].addEventListener("touchend", (e) => {
        if (this.data.peopleCanMoveing) return
        if (!this.data.mousedown) {
          return
        }
        this.data.scroller.doTouchEnd(e.timeStamp)
        this.data.mousedown = false
      }, false)
    },
    addBind: function (item, func) {
      item.on('tap', func)
      item.on('click', func)
    },
    // 图三处小人自发移动
    peopleMove1: function (pageIndex) {
      if (pageIndex === 1) {
        if (this.data.progress < 3 && !this.data.peopleCanMoveing) {
          this.data.peopleCanMoveing = true
          for (let i = 0; i < 0.58; i+= 0.005) {
            setTimeout(() => {
              if (!this.data.peopleCanMoveing || this.data.clickPeopleRunning) return
              this.data.people.x = this.data.screenInfo.w * (1.11 + i)
              if (i < 0.16) {
                this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.22, 0, i * 1000, 0.0003)
              } else {
                // console.log(this.data.screenInfo.h * 0.1704, i * this.data.screenInfo.h)
                // ssd
                this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2557, 155, i * 1000 , 0.00085)
                // console.log(this.data.people.y, this.methods.smooth(0.2557, 155, i * 1000 , 0.00085))
              }
            }, i * 4000)
          }
        }
      }
    },
    peopleMove2: function (pageIndex) {
      if (pageIndex === 3) {
        // console.log(this.data.progress)
        if (this.data.progress < 5 && !this.data.peopleCanMoveing) {
          this.data.peopleCanMoveing = true
          for (let i = 0; i < 0.52; i+= 0.005) {
            setTimeout(() => {
              if (!this.data.peopleCanMoveing || this.data.clickPeopleRunning) return
              this.data.people.x = this.data.screenInfo.w * (3.11 + i)
              if (i < 0.15) {
                this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5, 0, i * 1000, 0.0004)
                // console.log(i, 1- this.methods.smooth(0.7, 0, i * 1000, -0.0008))
              } else if (i < 0.3){
                this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.59, 0, i * 1000 , -0.0001)
                // console.log(this.methods.smooth(0.55, 0.5700, i * 1000 , -0.0001))
              } else {
                this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.76, 0, i * 1000 , -0.00075)
                // console.log(this.data.people.y, this.methods.smooth(0.76, 0, i * 1000 , -0.00075))
              }
            }, i * 4000)
          }
        }
      }
    },
    peopleMove3: function (pageIndex) {
      if (pageIndex === 5) {
        // console.log(this.data.progress)
        if (this.data.progress < 7 && !this.data.peopleCanMoveing) {
          this.data.peopleCanMoveing = true
          for (let i = 0; i < 0.2; i += 0.005) {
            setTimeout(() => {
              if (!this.data.peopleCanMoveing || this.data.clickPeopleRunning) return
              this.data.people.x = this.data.screenInfo.w * (5.11 + i)
              if (i < 0.15) {
                this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.48, 0, i * 1000, -0.0008)
                // console.log(this.data.people.y, this.methods.smooth(0.48, 0, i * 1000, -0.0008))
              }
            }, i * 4000)
          }
        }
      }
    },
    peopleMove4: function (pageIndex) {
      if (pageIndex === 7) {
        // console.log(this.data.progress)
        if (this.data.progress < 9 && !this.data.peopleCanMoveing) {
          this.data.peopleCanMoveing = true
          for (let i = 0; i < 0.36; i += 0.005) {
            setTimeout(() => {
              if (!this.data.peopleCanMoveing || this.data.clickPeopleRunning) return
              this.data.people.x = this.data.screenInfo.w * (7.11 + i)
              if (i < 0.16) {
                this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.7, 0, i * 1000, -0.0007)
                // console.log(i, 1- this.methods.smooth(0.7, 0, i * 1000, -0.0008))
              } else {
                this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.66, 0, i * 1000, -0.00045)
                // console.log(this.data.people.y, this.methods.smooth(0.66, 0, i * 1000, -0.00045))
              }
            }, i * 4000)
          }
        }
      }
    },
    peopleMove5: function (pageIndex) {
      if (pageIndex === 9) {
        // console.log(this.data.progress)
        if (this.data.progress < 11 && !this.data.peopleCanMoveing) {
          this.data.peopleCanMoveing = true
          for (let i = 0; i < 0.36; i += 0.005) {
            setTimeout(() => {
              if (!this.data.peopleCanMoveing || this.data.clickPeopleRunning) return
              this.data.people.x = this.data.screenInfo.w * (9.11 + i)
              if (i < 0.10) {
                this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3, 0, i * 1000, 0.0001)
                // console.log(i, 1- this.methods.smooth(0.7, 0, i * 1000, -0.0008))
              } else {
                this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.265, 0, i * 1000, 0.0004)
                // console.log(this.data.people.y, this.methods.smooth(0.265, 0, i * 1000, 0.0004))
              }
            }, i * 4000)
          }
        }
      }
    }
  }
</script>

<style lang="less">
  .loading-box {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 999;
    background-color: black;
    background-size: 100% 100%;
    .loading {
      width: 140px;
      height: 140px;
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      margin: auto;
    }
    .progress {
      text-align: center;
      font-size: 14px;
      color: #fff;
      line-height: 25px;
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      margin: auto;
      height: 20px;
    }
    img {
      display: block;
      height: 140px;
      margin: 0 auto;
    }
    p {
      color: white;
      text-align: center;
      line-height: 30px;
    }
  }
  .clock {
    width: 80%;
    height: 80%;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    left: 5%;
    right: 0;
    top: 15%;
    bottom: 0;
    margin: auto;
    position: fixed;
    display: none;
    user-select: none;
    background-image: url(./images/1-clock.png);
  }
  .dial {
    width: 47.2%;
    height: 76.8%;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    position: absolute;
    left: 21.8%;
    top: 7.4%;
    transform-origin: 0 50%;
    background-image: url(./images/1-clock-dial.png);
  }
  .flip-play {
    animation-name: flip;
    animation-duration: 1s;
    animation-fill-mode: forwards;
    animation-timing-function: ease-in-out;
    animation-iteration-count: 1;
  }
  .scale-play-forwards {
    animation-name: scalew;
    animation-duration: 2s;
    animation-fill-mode: forwards;
  }
  .scale-play {
    animation-name: scale;
    animation-duration: 2s;
    animation-timing-function: ease-in-out;
  }
  @keyframes flip {
    0% {
      transform: rotateY(0deg);
    }
    100% {
      transform: rotateY(120deg);
    }
  }
  @keyframes scale {
    0% {
      transform: scale(1);
    }
    60% {
      transform: scale(4);
    }
    100% {
      transform: scale(1);
    }
  }
  @keyframes scalew {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(5);
    }
  }
  .point {
    width: 64%;
    height: 64%;
    left: 17%;
    top: 19%;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    position: absolute;
    background-image: url(./images/1-point.png);
    transform-origin: 50% 50%;
  }
  @keyframes scale2 {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(0.9);
    }
  }
  @keyframes circle{
      0%{ transform:rotate(0deg); }
      100%{ transform:rotate(360deg); }
  }
  .hand {
    width: 15%;
    height: 15%;
    left: 50%;
    top: 27%;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    position: absolute;
    background-image: url(./images/1-hand.png);
    animation-name: scale2;
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
  }
  .share-box {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    display: none;
    z-index: 999;
    background-color: rgba(0, 0, 0, 0.50);
    img {
      position: absolute;
      left: 0;
      top: 10px;
    }
  }
  .qr-box {
    position: absolute;
    width: 120px;
    left: calc(9% - 45px);
    bottom: 0;
    margin: auto;
    display: none;
    padding-top: 40%;
    // padding-right: 15%;
    user-select: none;
    -webkit-touch-callout: default;
    img {
      width: 80px;
      height: 80px;
      margin: 0 20px;
      display: block;
      -webkit-touch-callout: default;
    }
    .qr-text {
      text-align: center;
      line-height: 18px;
      font-size: 12px;
    }
  }
  .main-box, canvas {
    width: 100%;
    height: 100%;
  }
  .text-box {
    position: absolute;
    width: 30%;
    padding: 10px;
    background-color: rgba(0, 0, 0, 0.6);
  }
  .text-box-content {
    color: #fff;
    font-size: 0.9em;
    line-height: 1.4em;
    font-weight: bold;
    font-family: Simsun;
    margin: 0 20px;
    text-align: center;
  }
  .music-box {
    position: fixed;
    right: 0px;
    top: 0px;
    .music-play {
      animation-name: circle;
      animation-duration: 5s;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
    }
    img {
      display: none;
      width: 30px;
      height: 30px;
      padding: 10px;
    }
  }
</style>