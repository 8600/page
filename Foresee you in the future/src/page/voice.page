<template>
  <div class="loading-box" id="loadingBox">
    <div class="loading">
      <img src="./images/loading.gif"/>
      <p id="loadingText">0%</p>
    </div>
  </div>
  <div class="main-box" id="main">

  </div>
</template>

<script>
  export default {
    data: {
      app: null,
      loader: null,
      container: null,
      titleStart: null,
      scroller: null,
      twoContainer: null,
      // 小人
      people: null,
      imgArr: [
        './images/1-title.png',
        './images/1.png',
        './images/logo.png',
        './images/3-colour.png',
        "./images/1-clock.png",
        "./images/1-point.png",
        "./images/1-hand.png",
        "./images/1-butterfly.png",
        "./images/people.png",
        "./images/2.png",
        "./images/3.png",
        "./images/3-light.png",
        "./images/4.png",
        "./images/5.png",
        "./images/6.png",
        "./images/7.png",
        "./images/8.png",
        "./images/9.png",
        "./images/10.png",
        "./images/11.png",
        "./images/share.png",
        "./images/5-colour.png",
        "./images/7-light.png",
        './images/7-colour.png',
        './images/9-colour.png',
        "./images/11-light.png",
        './images/11-colour.png'
      ],
      animationList: {}
    },
    created: function () {
      // 获取到进度条Dom
      const loadingTextDom =  $('#loadingText')[0]
      // 创建画板区域并获取设备屏幕宽高
      let bodySize = this.calculationScene(this)
      // 预加载资源
      this.data.loader = new PIXI.loaders.Loader()
      this.data.loader.add("bgm","audio/bgm.mp3")
        .add("nishuo1","audio/1nishuo.mp3")
        .add("dida","audio/dida.mp3")
        .add(this.data.imgArr)
        .onProgress.add((e) => {
          // 资源加载完毕后显示one
          loadingTextDom.innerText = parseInt(e.progress) + '%'
          if (Math.ceil(e.progress) >= 100) {
            // 显示one
            // 小手滑动动画
            this.data.animationList.oneHand = TweenMax.fromTo(oneHand, 1.5, {x: (bodySize.w * 0.44)},{x: (bodySize.w * 0.49), ease:Linear.easeNone}).repeat(-1)
            this.data.animationList.oneHand.play()
            // 蝴蝶飞舞动画
            this.data.animationList.oneButterfly = TweenMax.fromTo(oneButterfly, 0.8, {y: 0},{y: -1, ease:Linear.easeNone}).repeat(-1)
            this.data.animationList.oneButterfly.play()
            this.data.app.stage.addChild(one)

            // 隐藏掉加载页面
            $('#loadingBox').remove()
            // 播放音乐
            // this.data.loader.resources.bgm.data.loop = true
            // this.data.loader.resources.bgm.data.autoplay = true
            // this.data.loader.resources.bgm.data.play()
            
          }
        }
      )
      this.data.container = new PIXI.Container()
      this.data.container.interactive = true
      
      // 创建一个容器
      const one = new PIXI.Container()
      one.x = 0
      one.y = 0
      // 加载背景
      const bg1Image = this.methods.createSprite("./images/1.png", {
        width: bodySize.w,
        height: bodySize.h,
        x: 0,
        y: 0
      })
      // 加载首页logo
      const logoImageHeight = bodySize.h / 8
      const logoImageWidth = logoImageHeight * 2.75
      const logoImage = this.methods.createSprite("./images/logo.png", {
        width: logoImageWidth,
        height: logoImageHeight,
        // 位置左下角
        x: 0,
        y: bodySize.h - logoImageHeight
      })

      // 加载顶部标题
      const oneTitleHeight = bodySize.h / 20
      // 保持图片比例
      const oneTitleWidth = oneTitleHeight * 9.818
      const oneTitle = this.methods.createSprite("./images/1-title.png", {
        width: oneTitleWidth,
        height: oneTitleHeight,
        // 位置中间靠上
        x: (bodySize.w / 2) - (oneTitleWidth / 2),
        y: bodySize.h * 0.1
      })

      // 加载时钟
      const clockHeight = bodySize.h / 1.2
      // 保持图片比例
      const clockWidth = clockHeight * 1.7801
      const oneClock = this.methods.createSprite("./images/1-clock.png", {
        width: clockWidth,
        height: clockHeight,
        // 位置中间偏下10像素
        x: (bodySize.w / 2),
        y: (bodySize.h * 0.55),
        zIndex: 9
      })
      // 设置锚点
      oneClock.anchor.x = 0.5
      oneClock.anchor.y = 0.5
      
      
      // 加载指针1-point 图片宽度235px
      const pointHeight = bodySize.h / 4
      // 保持图片比例
      // console.log((bodySize.w / 2), (clockWidth / 2))
      const onePoint = this.methods.createSprite("./images/1-point.png", {
        width: pointHeight,
        height: pointHeight,
        // 位置中间偏下10像素
        x: (bodySize.w / 2) - (clockWidth / 2) + clockWidth * 0.5 - 2,
        y: (bodySize.h * 0.55) - (clockHeight / 2) + clockHeight * 0.5 - 2,
        zIndex: 999
      })
      // 设置锚点
      onePoint.anchor.x = 0.5
      onePoint.anchor.y = 0.5

      // 加载小手
      const handHeight = bodySize.h / 20
      const oneHand = this.methods.createSprite("./images/1-hand.png", {
        width: handHeight,
        height: handHeight,
        // 位置中间偏下10像素
        x: bodySize.w * 0.4,
        y: (bodySize.h * 0.46) - (handHeight / 2),
        zIndex: 2
      })

      // 加载蝴蝶 图片宽度:1347px 高度:730px 比例1.8452
      const butterflyHeight = bodySize.h / 1
      const butterflyWidth = bodySize.w
      const oneButterfly = this.methods.createSprite("./images/1-butterfly.png", {
        width: butterflyWidth,
        height: butterflyHeight,
        // 位置中间偏下10像素
        x: 0,
        y: 0,
        z: -1
      })

      one.addChild(bg1Image, logoImage, oneTitle, oneClock, oneHand, onePoint, oneButterfly)
      

      // 触摸事件
      $("#main").on("touchstart",(e) => {
        const touchInfo = this.calculationTouch(e)
        // console.log(touchInfo)
        // 针对横向和纵向
        if (touchInfo.xRatio > 0.43 && touchInfo.xRatio < 0.46 && touchInfo.yRatio > 0.42 && touchInfo.yRatio < 0.48) {
          // console.log('范围内了')
          // 触摸松开事件
          $("#main").on("touchend",(e) => {
            // 取消触摸移动的监听
            $("#main").off("touchmove")
          })
          $("#main").on("touchmove",(e) => {
            // 计算出比例
            let proportion = this.calculationTouch(e)
            proportion = (proportion.xRatio - 0.438) / 0.06
            // 锁定在合适的区间内
            if (proportion > 1) proportion = 1
            if (proportion < 0) proportion = 0
            // 设置指针的幅度
            onePoint.rotation = 0.6 * proportion
            // 如果旋转到指定角度放大钟表
            if (proportion === 1) {
              $("#main").off("touchmove")
              // 销毁蝴蝶
              // 停止蝴蝶动画
              this.data.animationList.oneButterfly.kill()
              oneButterfly.destroy()
              // 销毁小手
              this.data.animationList.oneHand.kill()
              oneHand.destroy()
              // 销毁指针
              onePoint.destroy()
              let oneClockAnimation = TweenMax.fromTo(oneClock.scale, 2 ,{x: 1, y: 1},{x: 5, y: 5, onComplete: () => {
                // 动画完毕销毁首页logo和背景
                logoImage.destroy()
                bg1Image.destroy()
                
                setTimeout(() => {
                  this.data.app.stage.removeChild(one)
                }, 0)
                // 销毁tocuh监听
                $("#main").off("touchstart")
                console.log('首页已销毁')
                // 开启第二部分
                this.two()
              }})
              // oneClockAnimation.play()
            }
            
          })
        }
      })
      // 点击事件
      // 加载资源
      this.data.loader.load((loader) => {
        // 设置音乐播放模式
        // console.log(loader)
      })
      
    },
    methods: {
      // 创建sprite对象
      createSprite: function(name, opt){
        const newSprite = new PIXI.Sprite.from(name)
        if (opt) {
          for (let key in opt) {
            newSprite[key] = opt[key]
          }
        }
        return newSprite;
      },
      smooth: function (baseValue, minValue, nowValue, step) {
        // console.log(nowValue, baseValue + (nowValue - minValue) * step)
        return baseValue + (nowValue - minValue) * step
      }
    },
    // 注册画板区域并返回设备屏幕信息
    calculationScene: function() {
      // 获取屏幕宽高
      const ww = $(window).width()
      const wh = $(window).height()
      console.log(`可视宽度:${ww}, 可视高度:${wh}`)
      // 判断是否为微信
      if (false) {
        if (window.orientation !== 90 && window.orientation !== -90){
          window.document.body.classList.add('horizontal')
          window.document.body.style.width = `${wh}px`
          window.document.body.style.height = `${ww}px`
          window.document.body.style.left = `calc(50% - ${wh / 2}px)`
          window.document.body.style.top = `calc(50% - ${ww / 2}px)`
          // 创建画布
          this.data.app = new PIXI.Application($(window).height(), $(window).width(), {
            backgroundColor: '0xffffff'
          })
          $('#main').append(this.data.app.view)
          this.data.app.stage.displayList = new PIXI.display.Stage()
          this.data.screenInfo = {w: wh, h: ww, transverse: false}
          return {w: wh, h: ww, transverse: false}
        }
      } else {
        if (ww < wh){
          window.document.body.classList.add('horizontal')
          window.document.body.style.width = `${wh}px`
          window.document.body.style.height = `${ww}px`
          window.document.body.style.left = `calc(50% - ${wh / 2}px)`
          window.document.body.style.top = `calc(50% - ${ww / 2}px)`
          // 创建画布
          this.data.app = new PIXI.Application($(window).height(), $(window).width(), {
            backgroundColor: '0xffffff'
          })
          $('#main').append(this.data.app.view)
          this.data.app.stage.displayList = new PIXI.display.Stage()
          this.data.screenInfo = {w: wh, h: ww, transverse: false}
          return {w: wh, h: ww, transverse: false}
        }
      }
      // 创建画布
      this.data.app = new PIXI.Application($(window).width(), $(window).height(), {
        backgroundColor: '0xc8c9c9'
      })
      $('#main').append(this.data.app.view)
      this.data.app.stage.displayList = new PIXI.display.Stage()
      this.data.transverse = true
      this.data.screenInfo = {w: ww, h: wh, transverse: true}
      return {w: ww, h: wh, transverse: true}
    },
    // 计算出鼠标点击位置
    calculationTouch: function (e) {
      if (this.data.screenInfo.transverse) {
        // console.log(e.originalEvent.targetTouches[0].pageX, e.originalEvent.targetTouches[0].pageY)
        return {
          x: e.originalEvent.targetTouches[0].pageX,
          y: e.originalEvent.targetTouches[0].pageY,
          xRatio: e.originalEvent.targetTouches[0].pageX / this.data.screenInfo.w,
          yRatio: e.originalEvent.targetTouches[0].pageY / this.data.screenInfo.h
        }
      } else {
        return {
          x: e.originalEvent.targetTouches[0].pageY,
          y: this.data.screenInfo.h - e.originalEvent.targetTouches[0].pageX,
          xRatio: e.originalEvent.targetTouches[0].pageY / this.data.screenInfo.w,
          yRatio: (this.data.screenInfo.h - e.originalEvent.targetTouches[0].pageX) / this.data.screenInfo.h
        }
      }
      
    },
    two: function () {
      const bodySize = this.data.screenInfo
      console.log('第二部分!')
      
      this.data.twoContainer = new PIXI.Container()
      this.data.twoContainer.x = 0
      this.data.twoContainer.y = 0
      this.data.twoContainer.width = this.data.screenInfo.w
      // 加载小人
      this.data.people = this.methods.createSprite("./images/people.png",{
        width: 50 * (this.data.screenInfo.w / 1024),
        height: 120 * (this.data.screenInfo.h / 768),
        x: 50,
        y: 0
      })
      // 第二张背景图
      const bg2Image = this.methods.createSprite("./images/2.png",{
        width: this.data.screenInfo.w + 1,
        height: this.data.screenInfo.h,
        x: -1,
        y: 0
      })
      
      // 第三张背景图
      const bg3Image = this.methods.createSprite("./images/3.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w,
        y: 1
      })
      
      // 第四章背景图
      const bg4Image = this.methods.createSprite("./images/4.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 2,
        y: -1
      })

      // 第五张背景图
      const bg5Image = this.methods.createSprite("./images/5.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 3,
        y: 0
      })

      // 第五张背景图
      const bg6Image = this.methods.createSprite("./images/6.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 4,
        y: 0
      })

      const bg7Image = this.methods.createSprite("./images/7.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 5,
        y: 1
      })
      const bg8Image = this.methods.createSprite("./images/8.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 6,
        y: -4
      })
      const bg9Image = this.methods.createSprite("./images/9.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 7,
        y: 0
      })
      const bg10Image = this.methods.createSprite("./images/10.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 8,
        y: 0
      })

      const bg11Image = this.methods.createSprite("./images/11.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 9,
        y: 0
      })

      const bgshare = this.methods.createSprite("./images/share.png",{
        width: this.data.screenInfo.w,
        height: this.data.screenInfo.h,
        x: this.data.screenInfo.w * 10,
        y: 0
      })
      //  ------------------------------------------- 亮光 -------------------------------------------
      // 第三张光 比例1
      const threeLightHeight = bodySize.h / 3
      const threeLight = this.methods.createSprite("./images/3-light.png", {
        width: threeLightHeight,
        height: threeLightHeight,
        // 位置中间靠上
        x: bodySize.w + (bodySize.w * 0.62) - (threeLightHeight / 2),
        y: bodySize.h * 0.1
      })
      // 设置可交互
      threeLight.interactive = true;
      threeLight.buttonMode = true
      // 第三张图 亮光触摸事件
      threeLight.on('pointerdown', () => {
        const texture = PIXI.Texture.fromFrame('./images/3-colour.png')
        bg3Image.setTexture(texture)
        // 销毁动画
        threeLightAnimationList.kill()
        // 销毁掉亮光
        threeLight.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(4)
      })

      // 第五张光 比例2.0581
      const fiveLightHeight = bodySize.h / 10
      const fiveLight = this.methods.createSprite("./images/5-light.png", {
        width: fiveLightHeight * 2.0581,
        height: fiveLightHeight,
        // 位置中间靠上
        x: bodySize.w * 3 + (bodySize.w * 0.575) - (fiveLightHeight / 2),
        y: bodySize.h * 0.58
      })
      // 设置可交互
      fiveLight.interactive = true;
      fiveLight.buttonMode = true
      // 第五张光 亮光触摸事件
      fiveLight.on('pointerdown', () => {
        const texture = PIXI.Texture.fromFrame('./images/5-colour.png')
        bg5Image.setTexture(texture)
        // 销毁动画
        fiveLightHeightAnimationList.kill()
        // 销毁掉亮光
        fiveLight.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(6)
      })

      // 第七张图 比例:0.7421
      const sevenLightHeight = bodySize.h / 5
      const sevenLight = this.methods.createSprite("./images/7-light.png", {
        width: sevenLightHeight * 0.7421,
        height: sevenLightHeight,
        // 位置中间靠上
        x: bodySize.w * 5 + (bodySize.w * 0.34) - (sevenLightHeight / 2),
        y: bodySize.h * 0.57
      })
      // 设置可交互
      sevenLight.interactive = true;
      sevenLight.buttonMode = true
      // 第五张光 亮光触摸事件
      sevenLight.on('pointerdown', () => {
        const texture = PIXI.Texture.fromFrame('./images/7-colour.png')
        bg7Image.setTexture(texture)
        // 销毁动画
        sevenLightHeightAnimationList.kill()
        // 销毁掉亮光
        sevenLight.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(8)
      })

      // 第九张图 比例:1
      const Light9Height = bodySize.h / 5
      const Light9 = this.methods.createSprite("./images/9-light.png", {
        width: Light9Height,
        height: Light9Height,
        // 位置中间靠上
        x: bodySize.w * 7 + (bodySize.w * 0.57) - (sevenLightHeight / 2),
        y: bodySize.h * 0.065
      })

      // 设置可交互
      Light9.interactive = true;
      Light9.buttonMode = true
      // 第五张光 亮光触摸事件
      Light9.on('pointerdown', () => {
        const texture = PIXI.Texture.fromFrame('./images/9-colour.png')
        bg9Image.setTexture(texture)
        // 销毁动画
        Light9AnimationList.kill()
        // 销毁掉亮光
        Light9.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(10)
      })

      // 第11张图 比例:1
      const Light11Height = bodySize.h / 1.3
      const Light11 = this.methods.createSprite("./images/11-light.png", {
        width: Light11Height,
        height: Light11Height,
        // 位置中间靠上
        x: bodySize.w * 9 + (bodySize.w * 0.34) - (sevenLightHeight / 2),
        y: bodySize.h * 0.065
      })
      // 设置可交互
      Light11.interactive = true;
      Light11.buttonMode = true
      // 第五张光 亮光触摸事件
      Light11.on('pointerdown', () => {
        const texture = PIXI.Texture.fromFrame('./images/11-colour.png')
        bg11Image.setTexture(texture)
        // 销毁动画
        Light11AnimationList.kill()
        // 销毁掉亮光
        Light11.destroy()
        // 设置可滚动的区域
        this.setShowPageNumber(11)
      })

      this.data.twoContainer.addChild(bg2Image, bg3Image, this.data.people, threeLight, bg4Image, bg5Image, bg6Image, bg7Image, bg8Image, bg9Image, bg10Image, bg11Image, bgshare, fiveLight, sevenLight, Light9, Light11)
      this.data.app.stage.addChild(this.data.twoContainer)
      
      // 三-亮光闪烁
      const threeLightAnimationList = TweenMax.fromTo(threeLight, 1, {alpha: 0},{alpha: 1}).repeat(-1)
      threeLightAnimationList.play()

      // 五-亮光闪烁
      const fiveLightHeightAnimationList = TweenMax.fromTo(fiveLight, 1, {alpha: 0},{alpha: 1}).repeat(-1)
      fiveLightHeightAnimationList.play()

      // 七-亮光闪烁
      const sevenLightHeightAnimationList = TweenMax.fromTo(sevenLight, 1, {alpha: 0},{alpha: 1}).repeat(-1)
      sevenLightHeightAnimationList.play()

      // 九-亮光闪烁
      const Light9AnimationList = TweenMax.fromTo(Light9, 1, {alpha: 0},{alpha: 1}).repeat(-1)
      Light9AnimationList.play()

      // 十一-亮光闪烁
      const Light11AnimationList = TweenMax.fromTo(Light11, 1, {alpha: 0},{alpha: 1}).repeat(-1)
      Light11AnimationList.play()

      this.scrollBegin()
    },
    scrollBegin: function () {
      console.log('注册scroll!')
      const transverse = this.data.screenInfo.transverse
      
      this.data.scroller = new Scroller((left, top, zoom) => {

        const scrollNumber = transverse ? left: top
        // 设置整个页面的x
        this.data.twoContainer.x = -scrollNumber
        const peopleX = scrollNumber + 50 * (1024 / this.data.screenInfo.w)
        // 移动小人
        this.data.people.x = peopleX
        // console.log(scrollNumber)
        // 小球移动轨迹
        this.setPeopleY(peopleX)
      }, {
        zooming: true,
        bouncing: false
      })
      // 设置可滚动的区域
      this.setShowPageNumber(2)
      // 监听鼠标事件
      this.mouseEvent()
      
    },
    // 设置可以拖动的屏幕数量
    setShowPageNumber: function (number) {
      const transverse = this.data.screenInfo.transverse
      // 根据横屏还是竖屏 设置滚动区域
      if (transverse) {
        this.data.scroller.setDimensions(this.data.screenInfo.w, this.data.screenInfo.h, this.data.screenInfo.w * number, this.data.screenInfo.h)
      } else {
        this.data.scroller.setDimensions(this.data.screenInfo.h, this.data.screenInfo.w, this.data.screenInfo.h, this.data.screenInfo.w * number)
      }
    },
    // 计算并设置小人Y坐标
    setPeopleY: function (peopleX) {
      // 当时是在屏幕分辨率为1024*768做的 所以要计算换算为真实屏幕
      peopleX = peopleX * (1024 / this.data.screenInfo.w)
      if (peopleX < 188) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.25, 0, peopleX, 0.001)
      } else if (peopleX < 390) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.438, 188, peopleX, 0.0007)
      } else if (peopleX < 560) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5794, 390, peopleX, 0.00025)
      } else if (peopleX < 687) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6219, 560, peopleX, -0.0003)
      } else if (peopleX < 966) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5838, 687, peopleX, -0.0011)
      } else if (peopleX < 1125) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2769, 966, peopleX, -0.0004)
      } else if (peopleX < 1167) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2133, 1125, peopleX, -0.00005)
      } else if (peopleX < 1412) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2112, 1167, peopleX, 0.0005)
      } else if (peopleX < 1591) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3337, 1412, peopleX, 0.001)
      } else if (peopleX < 1744) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5136, 1591, peopleX, 0.0006)
      } else if (peopleX < 1844) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6054, 1744, peopleX, 0.0001)
      } else if (peopleX < 2017) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6122, 1844, peopleX, -0.0006)
      } else if (peopleX < 2238) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5081, 2017, peopleX, -0.001)
      } else if (peopleX < 2386) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2864, 2238, peopleX, -0.0006)
      } else if (peopleX < 2530) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.1980, 2386, peopleX, -0.0002)
      } else if (peopleX < 2679) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.1690, 2530, peopleX, 0.00015)
      } else if (peopleX < 3299) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.1911, 2679, peopleX, 0.0006)
      } else if (peopleX < 3777) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5635, 3299, peopleX, -0.0005)
      } else if (peopleX < 3969) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3243, 3777, peopleX, -0.0001)
      } else if (peopleX < 4317) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3050, 3969, peopleX, 0.0003)
      } else if (peopleX < 4614) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.4096, 4317, peopleX, 0.0005)
      } else if (peopleX < 4944) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5582, 4614, peopleX, 0.0003)
      } else if (peopleX < 5352) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.6572, 4944, peopleX, -0.0007)
      } else if (peopleX < 5638) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.3714, 5352, peopleX, -0.0003)
      } else if (peopleX < 5946) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2854, 5638, peopleX, 0.0004)
      } else if (peopleX < 6443) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.4089, 5946, peopleX, 0.0006)
      } else if (peopleX < 7042) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.7080, 6443, peopleX, 0.00001)
      } else if (peopleX < 7723) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.7139, 7042, peopleX, -0.0004)
      } else if (peopleX < 8383) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.4412, 7723, peopleX, 0.0001)
      } else if (peopleX < 9303) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.5072, 8383, peopleX, -0.00026)
      } else if (peopleX < 10025) {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.2677, 9303, peopleX, 0.0003)
      } else {
        this.data.people.y = this.data.screenInfo.h * this.methods.smooth(0.4844, 10025, peopleX, -0.0004)
      }
    },
    // 移动屏幕鼠标事件
    mouseEvent: function () {
      let mousedown = false
      document.addEventListener("touchstart", (e) => {
        this.data.scroller.doTouchStart(e.touches, e.timeStamp)
        mousedown = true
      }, false)

      document.addEventListener("touchmove", (e) => {
        if (!mousedown) {
          return
        }
        // console.log(e.touches, e.timeStamp)
        this.data.scroller.doTouchMove(e.touches, e.timeStamp);
        mousedown = true
      }, false);

      document.addEventListener("touchend", (e) => {
        if (!mousedown) {
          return
        }
        this.data.scroller.doTouchEnd(e.timeStamp)
        mousedown = false
      }, false)
    }
  }
</script>

<style lang="less">
  .loading-box {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: #01021a;
    .loading {
      width: 200px;
      height: 168px;
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      margin: auto;
    }
    img {
      display: block;
    }
    p {
      color: white;
      text-align: center;
      line-height: 30px;
    }
  }
  
</style>